//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Ofek.ZCreditWS {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="clsZCreditWSSoap", Namespace="http://z-credit.com/")]
    public partial class clsZCreditWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CommitFullTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitFullTransactionWIntOtOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitSimpleTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CommitSimplePaymentsTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback ApplyPostTransactionDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailPostTransactionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReportDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomReportDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTerminalSettingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EchoTestOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public clsZCreditWS() {
            this.Url = global::Ofek.Properties.Settings.Default.Ofek_ZCreditWS_clsZCreditWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CommitFullTransactionCompletedEventHandler CommitFullTransactionCompleted;
        
        /// <remarks/>
        public event CommitFullTransactionWIntOtCompletedEventHandler CommitFullTransactionWIntOtCompleted;
        
        /// <remarks/>
        public event CommitSimpleTransactionCompletedEventHandler CommitSimpleTransactionCompleted;
        
        /// <remarks/>
        public event CommitSimplePaymentsTransactionCompletedEventHandler CommitSimplePaymentsTransactionCompleted;
        
        /// <remarks/>
        public event ValidateCardCompletedEventHandler ValidateCardCompleted;
        
        /// <remarks/>
        public event ApplyPostTransactionDataCompletedEventHandler ApplyPostTransactionDataCompleted;
        
        /// <remarks/>
        public event SendEmailPostTransactionCompletedEventHandler SendEmailPostTransactionCompleted;
        
        /// <remarks/>
        public event GetReportDataCompletedEventHandler GetReportDataCompleted;
        
        /// <remarks/>
        public event GetCustomReportDataCompletedEventHandler GetCustomReportDataCompleted;
        
        /// <remarks/>
        public event GetTerminalSettingsCompletedEventHandler GetTerminalSettingsCompleted;
        
        /// <remarks/>
        public event EchoTestCompletedEventHandler EchoTestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://z-credit.com/CommitFullTransaction", RequestNamespace="http://z-credit.com/", ResponseNamespace="http://z-credit.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CommitFullTransaction(
                    string TerminalNumber, 
                    string Password, 
                    string Track2, 
                    ref string CardNumber, 
                    ref string ExpDate_MMYY, 
                    float TransactionSum, 
                    int NumOfPayments, 
                    float FirstPaymentSum, 
                    float OtherPaymentsSum, 
                    bool IsRefund, 
                    int CurrencyType, 
                    int CreditType, 
                    int J, 
                    bool IsPointsTransaction, 
                    float PointsSum, 
                    string PhoneNumber, 
                    string HolderID, 
                    string CVV, 
                    bool IsCustomerPresent, 
                    string ExtraData, 
                    string CustomerName, 
                    string CustomerAddress, 
                    string CreditClubID, 
                    ref string AuthNum, 
                    out int Validation_Result_Code, 
                    out string Validation_Result_Message, 
                    out string CardName, 
                    out string CardIssuerCode, 
                    out string CardFinancerCode, 
                    out string CardBrandCode, 
                    out int ReferenceNumber, 
                    out string VoucherNumber, 
                    out string ApprovalType) {
            object[] results = this.Invoke("CommitFullTransaction", new object[] {
                        TerminalNumber,
                        Password,
                        Track2,
                        CardNumber,
                        ExpDate_MMYY,
                        TransactionSum,
                        NumOfPayments,
                        FirstPaymentSum,
                        OtherPaymentsSum,
                        IsRefund,
                        CurrencyType,
                        CreditType,
                        J,
                        IsPointsTransaction,
                        PointsSum,
                        PhoneNumber,
                        HolderID,
                        CVV,
                        IsCustomerPresent,
                        ExtraData,
                        CustomerName,
                        CustomerAddress,
                        CreditClubID,
                        AuthNum});
            CardNumber = ((string)(results[1]));
            ExpDate_MMYY = ((string)(results[2]));
            AuthNum = ((string)(results[3]));
            Validation_Result_Code = ((int)(results[4]));
            Validation_Result_Message = ((string)(results[5]));
            CardName = ((string)(results[6]));
            CardIssuerCode = ((string)(results[7]));
            CardFinancerCode = ((string)(results[8]));
            CardBrandCode = ((string)(results[9]));
            ReferenceNumber = ((int)(results[10]));
            VoucherNumber = ((string)(results[11]));
            ApprovalType = ((string)(results[12]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CommitFullTransactionAsync(
                    string TerminalNumber, 
                    string Password, 
                    string Track2, 
                    string CardNumber, 
                    string ExpDate_MMYY, 
                    float TransactionSum, 
                    int NumOfPayments, 
                    float FirstPaymentSum, 
                    float OtherPaymentsSum, 
                    bool IsRefund, 
                    int CurrencyType, 
                    int CreditType, 
                    int J, 
                    bool IsPointsTransaction, 
                    float PointsSum, 
                    string PhoneNumber, 
                    string HolderID, 
                    string CVV, 
                    bool IsCustomerPresent, 
                    string ExtraData, 
                    string CustomerName, 
                    string CustomerAddress, 
                    string CreditClubID, 
                    string AuthNum) {
            this.CommitFullTransactionAsync(TerminalNumber, Password, Track2, CardNumber, ExpDate_MMYY, TransactionSum, NumOfPayments, FirstPaymentSum, OtherPaymentsSum, IsRefund, CurrencyType, CreditType, J, IsPointsTransaction, PointsSum, PhoneNumber, HolderID, CVV, IsCustomerPresent, ExtraData, CustomerName, CustomerAddress, CreditClubID, AuthNum, null);
        }
        
        /// <remarks/>
        public void CommitFullTransactionAsync(
                    string TerminalNumber, 
                    string Password, 
                    string Track2, 
                    string CardNumber, 
                    string ExpDate_MMYY, 
                    float TransactionSum, 
                    int NumOfPayments, 
                    float FirstPaymentSum, 
                    float OtherPaymentsSum, 
                    bool IsRefund, 
                    int CurrencyType, 
                    int CreditType, 
                    int J, 
                    bool IsPointsTransaction, 
                    float PointsSum, 
                    string PhoneNumber, 
                    string HolderID, 
                    string CVV, 
                    bool IsCustomerPresent, 
                    string ExtraData, 
                    string CustomerName, 
                    string CustomerAddress, 
                    string CreditClubID, 
                    string AuthNum, 
                    object userState) {
            if ((this.CommitFullTransactionOperationCompleted == null)) {
                this.CommitFullTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitFullTransactionOperationCompleted);
            }
            this.InvokeAsync("CommitFullTransaction", new object[] {
                        TerminalNumber,
                        Password,
                        Track2,
                        CardNumber,
                        ExpDate_MMYY,
                        TransactionSum,
                        NumOfPayments,
                        FirstPaymentSum,
                        OtherPaymentsSum,
                        IsRefund,
                        CurrencyType,
                        CreditType,
                        J,
                        IsPointsTransaction,
                        PointsSum,
                        PhoneNumber,
                        HolderID,
                        CVV,
                        IsCustomerPresent,
                        ExtraData,
                        CustomerName,
                        CustomerAddress,
                        CreditClubID,
                        AuthNum}, this.CommitFullTransactionOperationCompleted, userState);
        }
        
        private void OnCommitFullTransactionOperationCompleted(object arg) {
            if ((this.CommitFullTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitFullTransactionCompleted(this, new CommitFullTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://z-credit.com/CommitFullTransactionWIntOt", RequestNamespace="http://z-credit.com/", ResponseNamespace="http://z-credit.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CommitFullTransactionWIntOt(
                    string TerminalNumber, 
                    string Password, 
                    string Track2, 
                    ref string CardNumber, 
                    ref string ExpDate_MMYY, 
                    float TransactionSum, 
                    int NumOfPayments, 
                    float FirstPaymentSum, 
                    float OtherPaymentsSum, 
                    bool IsRefund, 
                    int CurrencyType, 
                    int CreditType, 
                    int J, 
                    bool IsPointsTransaction, 
                    float PointsSum, 
                    string PhoneNumber, 
                    string HolderID, 
                    string CVV, 
                    bool IsCustomerPresent, 
                    string ExtraData, 
                    string CustomerName, 
                    string CustomerAddress, 
                    string CreditClubID, 
                    ref string AuthNum, 
                    out int Validation_Result_Code, 
                    out string Validation_Result_Message, 
                    out string CardName, 
                    out string CardIssuerCode, 
                    out string CardFinancerCode, 
                    out string CardBrandCode, 
                    out int ReferenceNumber, 
                    out string VoucherNumber, 
                    out string ApprovalType, 
                    out string Int_Ot) {
            object[] results = this.Invoke("CommitFullTransactionWIntOt", new object[] {
                        TerminalNumber,
                        Password,
                        Track2,
                        CardNumber,
                        ExpDate_MMYY,
                        TransactionSum,
                        NumOfPayments,
                        FirstPaymentSum,
                        OtherPaymentsSum,
                        IsRefund,
                        CurrencyType,
                        CreditType,
                        J,
                        IsPointsTransaction,
                        PointsSum,
                        PhoneNumber,
                        HolderID,
                        CVV,
                        IsCustomerPresent,
                        ExtraData,
                        CustomerName,
                        CustomerAddress,
                        CreditClubID,
                        AuthNum});
            CardNumber = ((string)(results[1]));
            ExpDate_MMYY = ((string)(results[2]));
            AuthNum = ((string)(results[3]));
            Validation_Result_Code = ((int)(results[4]));
            Validation_Result_Message = ((string)(results[5]));
            CardName = ((string)(results[6]));
            CardIssuerCode = ((string)(results[7]));
            CardFinancerCode = ((string)(results[8]));
            CardBrandCode = ((string)(results[9]));
            ReferenceNumber = ((int)(results[10]));
            VoucherNumber = ((string)(results[11]));
            ApprovalType = ((string)(results[12]));
            Int_Ot = ((string)(results[13]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CommitFullTransactionWIntOtAsync(
                    string TerminalNumber, 
                    string Password, 
                    string Track2, 
                    string CardNumber, 
                    string ExpDate_MMYY, 
                    float TransactionSum, 
                    int NumOfPayments, 
                    float FirstPaymentSum, 
                    float OtherPaymentsSum, 
                    bool IsRefund, 
                    int CurrencyType, 
                    int CreditType, 
                    int J, 
                    bool IsPointsTransaction, 
                    float PointsSum, 
                    string PhoneNumber, 
                    string HolderID, 
                    string CVV, 
                    bool IsCustomerPresent, 
                    string ExtraData, 
                    string CustomerName, 
                    string CustomerAddress, 
                    string CreditClubID, 
                    string AuthNum) {
            this.CommitFullTransactionWIntOtAsync(TerminalNumber, Password, Track2, CardNumber, ExpDate_MMYY, TransactionSum, NumOfPayments, FirstPaymentSum, OtherPaymentsSum, IsRefund, CurrencyType, CreditType, J, IsPointsTransaction, PointsSum, PhoneNumber, HolderID, CVV, IsCustomerPresent, ExtraData, CustomerName, CustomerAddress, CreditClubID, AuthNum, null);
        }
        
        /// <remarks/>
        public void CommitFullTransactionWIntOtAsync(
                    string TerminalNumber, 
                    string Password, 
                    string Track2, 
                    string CardNumber, 
                    string ExpDate_MMYY, 
                    float TransactionSum, 
                    int NumOfPayments, 
                    float FirstPaymentSum, 
                    float OtherPaymentsSum, 
                    bool IsRefund, 
                    int CurrencyType, 
                    int CreditType, 
                    int J, 
                    bool IsPointsTransaction, 
                    float PointsSum, 
                    string PhoneNumber, 
                    string HolderID, 
                    string CVV, 
                    bool IsCustomerPresent, 
                    string ExtraData, 
                    string CustomerName, 
                    string CustomerAddress, 
                    string CreditClubID, 
                    string AuthNum, 
                    object userState) {
            if ((this.CommitFullTransactionWIntOtOperationCompleted == null)) {
                this.CommitFullTransactionWIntOtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitFullTransactionWIntOtOperationCompleted);
            }
            this.InvokeAsync("CommitFullTransactionWIntOt", new object[] {
                        TerminalNumber,
                        Password,
                        Track2,
                        CardNumber,
                        ExpDate_MMYY,
                        TransactionSum,
                        NumOfPayments,
                        FirstPaymentSum,
                        OtherPaymentsSum,
                        IsRefund,
                        CurrencyType,
                        CreditType,
                        J,
                        IsPointsTransaction,
                        PointsSum,
                        PhoneNumber,
                        HolderID,
                        CVV,
                        IsCustomerPresent,
                        ExtraData,
                        CustomerName,
                        CustomerAddress,
                        CreditClubID,
                        AuthNum}, this.CommitFullTransactionWIntOtOperationCompleted, userState);
        }
        
        private void OnCommitFullTransactionWIntOtOperationCompleted(object arg) {
            if ((this.CommitFullTransactionWIntOtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitFullTransactionWIntOtCompleted(this, new CommitFullTransactionWIntOtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://z-credit.com/CommitSimpleTransaction", RequestNamespace="http://z-credit.com/", ResponseNamespace="http://z-credit.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CommitSimpleTransaction(
                    string TerminalNumber, 
                    string Password, 
                    string Track2, 
                    ref string CardNumber, 
                    ref string ExpDate_MMYY, 
                    float TransactionSum, 
                    string HolderID, 
                    string CVV, 
                    bool IsCustomerPresent, 
                    ref string AuthNum, 
                    out int Validation_Result_Code, 
                    out string Validation_Result_Message, 
                    out string CardName, 
                    out string CardIssuerCode, 
                    out string CardFinancerCode, 
                    out string CardBrandCode, 
                    out int ReferenceNumber, 
                    out string VoucherNumber, 
                    out string ApprovalType) {
            object[] results = this.Invoke("CommitSimpleTransaction", new object[] {
                        TerminalNumber,
                        Password,
                        Track2,
                        CardNumber,
                        ExpDate_MMYY,
                        TransactionSum,
                        HolderID,
                        CVV,
                        IsCustomerPresent,
                        AuthNum});
            CardNumber = ((string)(results[1]));
            ExpDate_MMYY = ((string)(results[2]));
            AuthNum = ((string)(results[3]));
            Validation_Result_Code = ((int)(results[4]));
            Validation_Result_Message = ((string)(results[5]));
            CardName = ((string)(results[6]));
            CardIssuerCode = ((string)(results[7]));
            CardFinancerCode = ((string)(results[8]));
            CardBrandCode = ((string)(results[9]));
            ReferenceNumber = ((int)(results[10]));
            VoucherNumber = ((string)(results[11]));
            ApprovalType = ((string)(results[12]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CommitSimpleTransactionAsync(string TerminalNumber, string Password, string Track2, string CardNumber, string ExpDate_MMYY, float TransactionSum, string HolderID, string CVV, bool IsCustomerPresent, string AuthNum) {
            this.CommitSimpleTransactionAsync(TerminalNumber, Password, Track2, CardNumber, ExpDate_MMYY, TransactionSum, HolderID, CVV, IsCustomerPresent, AuthNum, null);
        }
        
        /// <remarks/>
        public void CommitSimpleTransactionAsync(string TerminalNumber, string Password, string Track2, string CardNumber, string ExpDate_MMYY, float TransactionSum, string HolderID, string CVV, bool IsCustomerPresent, string AuthNum, object userState) {
            if ((this.CommitSimpleTransactionOperationCompleted == null)) {
                this.CommitSimpleTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitSimpleTransactionOperationCompleted);
            }
            this.InvokeAsync("CommitSimpleTransaction", new object[] {
                        TerminalNumber,
                        Password,
                        Track2,
                        CardNumber,
                        ExpDate_MMYY,
                        TransactionSum,
                        HolderID,
                        CVV,
                        IsCustomerPresent,
                        AuthNum}, this.CommitSimpleTransactionOperationCompleted, userState);
        }
        
        private void OnCommitSimpleTransactionOperationCompleted(object arg) {
            if ((this.CommitSimpleTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitSimpleTransactionCompleted(this, new CommitSimpleTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://z-credit.com/CommitSimplePaymentsTransaction", RequestNamespace="http://z-credit.com/", ResponseNamespace="http://z-credit.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CommitSimplePaymentsTransaction(
                    string TerminalNumber, 
                    string Password, 
                    string Track2, 
                    ref string CardNumber, 
                    ref string ExpDate_MMYY, 
                    float TransactionSum, 
                    int NumOfPayments, 
                    float FirstPaymentSum, 
                    float OtherPaymentsSum, 
                    string HolderID, 
                    string CVV, 
                    bool IsCustomerPresent, 
                    ref string AuthNum, 
                    out int Validation_Result_Code, 
                    out string Validation_Result_Message, 
                    out string CardName, 
                    out string CardIssuerCode, 
                    out string CardFinancerCode, 
                    out string CardBrandCode, 
                    out int ReferenceNumber, 
                    out string VoucherNumber, 
                    out string ApprovalType) {
            object[] results = this.Invoke("CommitSimplePaymentsTransaction", new object[] {
                        TerminalNumber,
                        Password,
                        Track2,
                        CardNumber,
                        ExpDate_MMYY,
                        TransactionSum,
                        NumOfPayments,
                        FirstPaymentSum,
                        OtherPaymentsSum,
                        HolderID,
                        CVV,
                        IsCustomerPresent,
                        AuthNum});
            CardNumber = ((string)(results[1]));
            ExpDate_MMYY = ((string)(results[2]));
            AuthNum = ((string)(results[3]));
            Validation_Result_Code = ((int)(results[4]));
            Validation_Result_Message = ((string)(results[5]));
            CardName = ((string)(results[6]));
            CardIssuerCode = ((string)(results[7]));
            CardFinancerCode = ((string)(results[8]));
            CardBrandCode = ((string)(results[9]));
            ReferenceNumber = ((int)(results[10]));
            VoucherNumber = ((string)(results[11]));
            ApprovalType = ((string)(results[12]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CommitSimplePaymentsTransactionAsync(string TerminalNumber, string Password, string Track2, string CardNumber, string ExpDate_MMYY, float TransactionSum, int NumOfPayments, float FirstPaymentSum, float OtherPaymentsSum, string HolderID, string CVV, bool IsCustomerPresent, string AuthNum) {
            this.CommitSimplePaymentsTransactionAsync(TerminalNumber, Password, Track2, CardNumber, ExpDate_MMYY, TransactionSum, NumOfPayments, FirstPaymentSum, OtherPaymentsSum, HolderID, CVV, IsCustomerPresent, AuthNum, null);
        }
        
        /// <remarks/>
        public void CommitSimplePaymentsTransactionAsync(string TerminalNumber, string Password, string Track2, string CardNumber, string ExpDate_MMYY, float TransactionSum, int NumOfPayments, float FirstPaymentSum, float OtherPaymentsSum, string HolderID, string CVV, bool IsCustomerPresent, string AuthNum, object userState) {
            if ((this.CommitSimplePaymentsTransactionOperationCompleted == null)) {
                this.CommitSimplePaymentsTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCommitSimplePaymentsTransactionOperationCompleted);
            }
            this.InvokeAsync("CommitSimplePaymentsTransaction", new object[] {
                        TerminalNumber,
                        Password,
                        Track2,
                        CardNumber,
                        ExpDate_MMYY,
                        TransactionSum,
                        NumOfPayments,
                        FirstPaymentSum,
                        OtherPaymentsSum,
                        HolderID,
                        CVV,
                        IsCustomerPresent,
                        AuthNum}, this.CommitSimplePaymentsTransactionOperationCompleted, userState);
        }
        
        private void OnCommitSimplePaymentsTransactionOperationCompleted(object arg) {
            if ((this.CommitSimplePaymentsTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CommitSimplePaymentsTransactionCompleted(this, new CommitSimplePaymentsTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://z-credit.com/ValidateCard", RequestNamespace="http://z-credit.com/", ResponseNamespace="http://z-credit.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateCard(string TerminalNumber, string Password, string Track2, ref string CardNumber, ref string ExpDate_MMYY, out int Validation_Result_Code, out string Validation_Result_Message, out string CardName) {
            object[] results = this.Invoke("ValidateCard", new object[] {
                        TerminalNumber,
                        Password,
                        Track2,
                        CardNumber,
                        ExpDate_MMYY});
            CardNumber = ((string)(results[1]));
            ExpDate_MMYY = ((string)(results[2]));
            Validation_Result_Code = ((int)(results[3]));
            Validation_Result_Message = ((string)(results[4]));
            CardName = ((string)(results[5]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateCardAsync(string TerminalNumber, string Password, string Track2, string CardNumber, string ExpDate_MMYY) {
            this.ValidateCardAsync(TerminalNumber, Password, Track2, CardNumber, ExpDate_MMYY, null);
        }
        
        /// <remarks/>
        public void ValidateCardAsync(string TerminalNumber, string Password, string Track2, string CardNumber, string ExpDate_MMYY, object userState) {
            if ((this.ValidateCardOperationCompleted == null)) {
                this.ValidateCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateCardOperationCompleted);
            }
            this.InvokeAsync("ValidateCard", new object[] {
                        TerminalNumber,
                        Password,
                        Track2,
                        CardNumber,
                        ExpDate_MMYY}, this.ValidateCardOperationCompleted, userState);
        }
        
        private void OnValidateCardOperationCompleted(object arg) {
            if ((this.ValidateCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCardCompleted(this, new ValidateCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://z-credit.com/ApplyPostTransactionData", RequestNamespace="http://z-credit.com/", ResponseNamespace="http://z-credit.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ApplyPostTransactionData(string TerminalNumber, string Password, int ReferenceNumber, string SignatureData, string LocationData, string ImageData, string AudioSampleData, out int Validation_Result_Code, out string Validation_Result_Message) {
            object[] results = this.Invoke("ApplyPostTransactionData", new object[] {
                        TerminalNumber,
                        Password,
                        ReferenceNumber,
                        SignatureData,
                        LocationData,
                        ImageData,
                        AudioSampleData});
            Validation_Result_Code = ((int)(results[1]));
            Validation_Result_Message = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ApplyPostTransactionDataAsync(string TerminalNumber, string Password, int ReferenceNumber, string SignatureData, string LocationData, string ImageData, string AudioSampleData) {
            this.ApplyPostTransactionDataAsync(TerminalNumber, Password, ReferenceNumber, SignatureData, LocationData, ImageData, AudioSampleData, null);
        }
        
        /// <remarks/>
        public void ApplyPostTransactionDataAsync(string TerminalNumber, string Password, int ReferenceNumber, string SignatureData, string LocationData, string ImageData, string AudioSampleData, object userState) {
            if ((this.ApplyPostTransactionDataOperationCompleted == null)) {
                this.ApplyPostTransactionDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplyPostTransactionDataOperationCompleted);
            }
            this.InvokeAsync("ApplyPostTransactionData", new object[] {
                        TerminalNumber,
                        Password,
                        ReferenceNumber,
                        SignatureData,
                        LocationData,
                        ImageData,
                        AudioSampleData}, this.ApplyPostTransactionDataOperationCompleted, userState);
        }
        
        private void OnApplyPostTransactionDataOperationCompleted(object arg) {
            if ((this.ApplyPostTransactionDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplyPostTransactionDataCompleted(this, new ApplyPostTransactionDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://z-credit.com/SendEmailPostTransaction", RequestNamespace="http://z-credit.com/", ResponseNamespace="http://z-credit.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendEmailPostTransaction(string TerminalNumber, string Password, int ReferenceNumber, bool SendEmailToMerchant, bool SendEmailToCustomer, out int Validation_Result_Code, out string Validation_Result_Message) {
            object[] results = this.Invoke("SendEmailPostTransaction", new object[] {
                        TerminalNumber,
                        Password,
                        ReferenceNumber,
                        SendEmailToMerchant,
                        SendEmailToCustomer});
            Validation_Result_Code = ((int)(results[1]));
            Validation_Result_Message = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmailPostTransactionAsync(string TerminalNumber, string Password, int ReferenceNumber, bool SendEmailToMerchant, bool SendEmailToCustomer) {
            this.SendEmailPostTransactionAsync(TerminalNumber, Password, ReferenceNumber, SendEmailToMerchant, SendEmailToCustomer, null);
        }
        
        /// <remarks/>
        public void SendEmailPostTransactionAsync(string TerminalNumber, string Password, int ReferenceNumber, bool SendEmailToMerchant, bool SendEmailToCustomer, object userState) {
            if ((this.SendEmailPostTransactionOperationCompleted == null)) {
                this.SendEmailPostTransactionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailPostTransactionOperationCompleted);
            }
            this.InvokeAsync("SendEmailPostTransaction", new object[] {
                        TerminalNumber,
                        Password,
                        ReferenceNumber,
                        SendEmailToMerchant,
                        SendEmailToCustomer}, this.SendEmailPostTransactionOperationCompleted, userState);
        }
        
        private void OnSendEmailPostTransactionOperationCompleted(object arg) {
            if ((this.SendEmailPostTransactionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailPostTransactionCompleted(this, new SendEmailPostTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://z-credit.com/GetReportData", RequestNamespace="http://z-credit.com/", ResponseNamespace="http://z-credit.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetReportData(
                    int TransactionsSource, 
                    string TerminalNumber, 
                    string Password, 
                    string CardNumber_Last4Digits, 
                    string From_TransactionDate_DDmmYYHHMMSS, 
                    string To_TransactionDate_DDmmYYHHMMSS, 
                    string From_TransactionSum, 
                    string To_TransactionSum, 
                    string HolderID, 
                    string ShvaAuthNumber, 
                    string InternalReferenceNumber, 
                    string CardIssuerCode, 
                    string CardFinancerCode, 
                    string TransactionType, 
                    string NumberOfPayments, 
                    bool RefundsOnly, 
                    out int Validation_Result_Code, 
                    out string Validation_Result_Message, 
                    out string XmlDataResponse) {
            object[] results = this.Invoke("GetReportData", new object[] {
                        TransactionsSource,
                        TerminalNumber,
                        Password,
                        CardNumber_Last4Digits,
                        From_TransactionDate_DDmmYYHHMMSS,
                        To_TransactionDate_DDmmYYHHMMSS,
                        From_TransactionSum,
                        To_TransactionSum,
                        HolderID,
                        ShvaAuthNumber,
                        InternalReferenceNumber,
                        CardIssuerCode,
                        CardFinancerCode,
                        TransactionType,
                        NumberOfPayments,
                        RefundsOnly});
            Validation_Result_Code = ((int)(results[1]));
            Validation_Result_Message = ((string)(results[2]));
            XmlDataResponse = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetReportDataAsync(
                    int TransactionsSource, 
                    string TerminalNumber, 
                    string Password, 
                    string CardNumber_Last4Digits, 
                    string From_TransactionDate_DDmmYYHHMMSS, 
                    string To_TransactionDate_DDmmYYHHMMSS, 
                    string From_TransactionSum, 
                    string To_TransactionSum, 
                    string HolderID, 
                    string ShvaAuthNumber, 
                    string InternalReferenceNumber, 
                    string CardIssuerCode, 
                    string CardFinancerCode, 
                    string TransactionType, 
                    string NumberOfPayments, 
                    bool RefundsOnly) {
            this.GetReportDataAsync(TransactionsSource, TerminalNumber, Password, CardNumber_Last4Digits, From_TransactionDate_DDmmYYHHMMSS, To_TransactionDate_DDmmYYHHMMSS, From_TransactionSum, To_TransactionSum, HolderID, ShvaAuthNumber, InternalReferenceNumber, CardIssuerCode, CardFinancerCode, TransactionType, NumberOfPayments, RefundsOnly, null);
        }
        
        /// <remarks/>
        public void GetReportDataAsync(
                    int TransactionsSource, 
                    string TerminalNumber, 
                    string Password, 
                    string CardNumber_Last4Digits, 
                    string From_TransactionDate_DDmmYYHHMMSS, 
                    string To_TransactionDate_DDmmYYHHMMSS, 
                    string From_TransactionSum, 
                    string To_TransactionSum, 
                    string HolderID, 
                    string ShvaAuthNumber, 
                    string InternalReferenceNumber, 
                    string CardIssuerCode, 
                    string CardFinancerCode, 
                    string TransactionType, 
                    string NumberOfPayments, 
                    bool RefundsOnly, 
                    object userState) {
            if ((this.GetReportDataOperationCompleted == null)) {
                this.GetReportDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReportDataOperationCompleted);
            }
            this.InvokeAsync("GetReportData", new object[] {
                        TransactionsSource,
                        TerminalNumber,
                        Password,
                        CardNumber_Last4Digits,
                        From_TransactionDate_DDmmYYHHMMSS,
                        To_TransactionDate_DDmmYYHHMMSS,
                        From_TransactionSum,
                        To_TransactionSum,
                        HolderID,
                        ShvaAuthNumber,
                        InternalReferenceNumber,
                        CardIssuerCode,
                        CardFinancerCode,
                        TransactionType,
                        NumberOfPayments,
                        RefundsOnly}, this.GetReportDataOperationCompleted, userState);
        }
        
        private void OnGetReportDataOperationCompleted(object arg) {
            if ((this.GetReportDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReportDataCompleted(this, new GetReportDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://z-credit.com/GetCustomReportData", RequestNamespace="http://z-credit.com/", ResponseNamespace="http://z-credit.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetCustomReportData(int ReportNumber, string TerminalNumber, string Password, string From_TransactionDate_DDmmYYHHMMSS, string To_TransactionDate_DDmmYYHHMMSS, out int Validation_Result_Code, out string Validation_Result_Message, out string XmlDataResponse) {
            object[] results = this.Invoke("GetCustomReportData", new object[] {
                        ReportNumber,
                        TerminalNumber,
                        Password,
                        From_TransactionDate_DDmmYYHHMMSS,
                        To_TransactionDate_DDmmYYHHMMSS});
            Validation_Result_Code = ((int)(results[1]));
            Validation_Result_Message = ((string)(results[2]));
            XmlDataResponse = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomReportDataAsync(int ReportNumber, string TerminalNumber, string Password, string From_TransactionDate_DDmmYYHHMMSS, string To_TransactionDate_DDmmYYHHMMSS) {
            this.GetCustomReportDataAsync(ReportNumber, TerminalNumber, Password, From_TransactionDate_DDmmYYHHMMSS, To_TransactionDate_DDmmYYHHMMSS, null);
        }
        
        /// <remarks/>
        public void GetCustomReportDataAsync(int ReportNumber, string TerminalNumber, string Password, string From_TransactionDate_DDmmYYHHMMSS, string To_TransactionDate_DDmmYYHHMMSS, object userState) {
            if ((this.GetCustomReportDataOperationCompleted == null)) {
                this.GetCustomReportDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomReportDataOperationCompleted);
            }
            this.InvokeAsync("GetCustomReportData", new object[] {
                        ReportNumber,
                        TerminalNumber,
                        Password,
                        From_TransactionDate_DDmmYYHHMMSS,
                        To_TransactionDate_DDmmYYHHMMSS}, this.GetCustomReportDataOperationCompleted, userState);
        }
        
        private void OnGetCustomReportDataOperationCompleted(object arg) {
            if ((this.GetCustomReportDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomReportDataCompleted(this, new GetCustomReportDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://z-credit.com/GetTerminalSettings", RequestNamespace="http://z-credit.com/", ResponseNamespace="http://z-credit.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetTerminalSettings(string TerminalNumber, string Password, out string TerminalName, out string TerminalVersion, out string TerminalBusinessNumbers, out int Validation_Result_Code, out string Validation_Result_Message) {
            object[] results = this.Invoke("GetTerminalSettings", new object[] {
                        TerminalNumber,
                        Password});
            TerminalName = ((string)(results[1]));
            TerminalVersion = ((string)(results[2]));
            TerminalBusinessNumbers = ((string)(results[3]));
            Validation_Result_Code = ((int)(results[4]));
            Validation_Result_Message = ((string)(results[5]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetTerminalSettingsAsync(string TerminalNumber, string Password) {
            this.GetTerminalSettingsAsync(TerminalNumber, Password, null);
        }
        
        /// <remarks/>
        public void GetTerminalSettingsAsync(string TerminalNumber, string Password, object userState) {
            if ((this.GetTerminalSettingsOperationCompleted == null)) {
                this.GetTerminalSettingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTerminalSettingsOperationCompleted);
            }
            this.InvokeAsync("GetTerminalSettings", new object[] {
                        TerminalNumber,
                        Password}, this.GetTerminalSettingsOperationCompleted, userState);
        }
        
        private void OnGetTerminalSettingsOperationCompleted(object arg) {
            if ((this.GetTerminalSettingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTerminalSettingsCompleted(this, new GetTerminalSettingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://z-credit.com/EchoTest", RequestNamespace="http://z-credit.com/", ResponseNamespace="http://z-credit.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool EchoTest(string TerminalNumber, string Password, out int Validation_Result_Code, out string Validation_Result_Message) {
            object[] results = this.Invoke("EchoTest", new object[] {
                        TerminalNumber,
                        Password});
            Validation_Result_Code = ((int)(results[1]));
            Validation_Result_Message = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EchoTestAsync(string TerminalNumber, string Password) {
            this.EchoTestAsync(TerminalNumber, Password, null);
        }
        
        /// <remarks/>
        public void EchoTestAsync(string TerminalNumber, string Password, object userState) {
            if ((this.EchoTestOperationCompleted == null)) {
                this.EchoTestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEchoTestOperationCompleted);
            }
            this.InvokeAsync("EchoTest", new object[] {
                        TerminalNumber,
                        Password}, this.EchoTestOperationCompleted, userState);
        }
        
        private void OnEchoTestOperationCompleted(object arg) {
            if ((this.EchoTestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EchoTestCompleted(this, new EchoTestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CommitFullTransactionCompletedEventHandler(object sender, CommitFullTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitFullTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitFullTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string CardNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ExpDate_MMYY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string AuthNum {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int Validation_Result_Code {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string Validation_Result_Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string CardName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string CardIssuerCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string CardFinancerCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string CardBrandCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public int ReferenceNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string VoucherNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string ApprovalType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CommitFullTransactionWIntOtCompletedEventHandler(object sender, CommitFullTransactionWIntOtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitFullTransactionWIntOtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitFullTransactionWIntOtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string CardNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ExpDate_MMYY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string AuthNum {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int Validation_Result_Code {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string Validation_Result_Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string CardName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string CardIssuerCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string CardFinancerCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string CardBrandCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public int ReferenceNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string VoucherNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string ApprovalType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
        
        /// <remarks/>
        public string Int_Ot {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CommitSimpleTransactionCompletedEventHandler(object sender, CommitSimpleTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitSimpleTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitSimpleTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string CardNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ExpDate_MMYY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string AuthNum {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int Validation_Result_Code {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string Validation_Result_Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string CardName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string CardIssuerCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string CardFinancerCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string CardBrandCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public int ReferenceNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string VoucherNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string ApprovalType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CommitSimplePaymentsTransactionCompletedEventHandler(object sender, CommitSimplePaymentsTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CommitSimplePaymentsTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CommitSimplePaymentsTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string CardNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ExpDate_MMYY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string AuthNum {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int Validation_Result_Code {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string Validation_Result_Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string CardName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        /// <remarks/>
        public string CardIssuerCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        /// <remarks/>
        public string CardFinancerCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        /// <remarks/>
        public string CardBrandCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        /// <remarks/>
        public int ReferenceNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[10]));
            }
        }
        
        /// <remarks/>
        public string VoucherNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[11]));
            }
        }
        
        /// <remarks/>
        public string ApprovalType {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ValidateCardCompletedEventHandler(object sender, ValidateCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string CardNumber {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ExpDate_MMYY {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int Validation_Result_Code {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string Validation_Result_Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string CardName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ApplyPostTransactionDataCompletedEventHandler(object sender, ApplyPostTransactionDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplyPostTransactionDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ApplyPostTransactionDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int Validation_Result_Code {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string Validation_Result_Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendEmailPostTransactionCompletedEventHandler(object sender, SendEmailPostTransactionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmailPostTransactionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmailPostTransactionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int Validation_Result_Code {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string Validation_Result_Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetReportDataCompletedEventHandler(object sender, GetReportDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReportDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReportDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int Validation_Result_Code {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string Validation_Result_Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string XmlDataResponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetCustomReportDataCompletedEventHandler(object sender, GetCustomReportDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomReportDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomReportDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int Validation_Result_Code {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string Validation_Result_Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string XmlDataResponse {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetTerminalSettingsCompletedEventHandler(object sender, GetTerminalSettingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTerminalSettingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTerminalSettingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string TerminalName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string TerminalVersion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string TerminalBusinessNumbers {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public int Validation_Result_Code {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string Validation_Result_Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void EchoTestCompletedEventHandler(object sender, EchoTestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EchoTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EchoTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int Validation_Result_Code {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string Validation_Result_Message {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591