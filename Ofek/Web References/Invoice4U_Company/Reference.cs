//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Ofek.Invoice4U_Company {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="w_companySoap", Namespace="http://tempuri.org/Billing/w_company")]
    public partial class w_company : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback INSERTOperationCompleted;
        
        private System.Threading.SendOrPostCallback INSERT1OperationCompleted;
        
        private System.Threading.SendOrPostCallback UPDATEOperationCompleted;
        
        private System.Threading.SendOrPostCallback UPDATE1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GETCUSTOMERDOCUMENTSOperationCompleted;
        
        private System.Threading.SendOrPostCallback RETRIEVEOperationCompleted;
        
        private System.Threading.SendOrPostCallback GETLISTOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSetOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public w_company() {
            this.Url = global::Ofek.Properties.Settings.Default.Ofek_Invoice4U_Company_w_company;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event INSERTCompletedEventHandler INSERTCompleted;
        
        /// <remarks/>
        public event INSERT1CompletedEventHandler INSERT1Completed;
        
        /// <remarks/>
        public event UPDATECompletedEventHandler UPDATECompleted;
        
        /// <remarks/>
        public event UPDATE1CompletedEventHandler UPDATE1Completed;
        
        /// <remarks/>
        public event GETCUSTOMERDOCUMENTSCompletedEventHandler GETCUSTOMERDOCUMENTSCompleted;
        
        /// <remarks/>
        public event RETRIEVECompletedEventHandler RETRIEVECompleted;
        
        /// <remarks/>
        public event GETLISTCompletedEventHandler GETLISTCompleted;
        
        /// <remarks/>
        public event GetSetCompletedEventHandler GetSetCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_company/INSERT", RequestNamespace="http://tempuri.org/Billing/w_company", ResponseNamespace="http://tempuri.org/Billing/w_company", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet INSERT(
                    string Username, 
                    string Key, 
                    string CompanyCode, 
                    string CompanyName, 
                    string CompanyAddress, 
                    string CompanyCity, 
                    string CompanyState, 
                    string CompanyZipcode, 
                    string CompanyTel1, 
                    string CompanyTel2, 
                    string CompanyCell, 
                    string CompanyFax, 
                    string CompanyEmail, 
                    string CompanyWebsite, 
                    string CompanyComments, 
                    string CompanyTaxId) {
            object[] results = this.Invoke("INSERT", new object[] {
                        Username,
                        Key,
                        CompanyCode,
                        CompanyName,
                        CompanyAddress,
                        CompanyCity,
                        CompanyState,
                        CompanyZipcode,
                        CompanyTel1,
                        CompanyTel2,
                        CompanyCell,
                        CompanyFax,
                        CompanyEmail,
                        CompanyWebsite,
                        CompanyComments,
                        CompanyTaxId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void INSERTAsync(
                    string Username, 
                    string Key, 
                    string CompanyCode, 
                    string CompanyName, 
                    string CompanyAddress, 
                    string CompanyCity, 
                    string CompanyState, 
                    string CompanyZipcode, 
                    string CompanyTel1, 
                    string CompanyTel2, 
                    string CompanyCell, 
                    string CompanyFax, 
                    string CompanyEmail, 
                    string CompanyWebsite, 
                    string CompanyComments, 
                    string CompanyTaxId) {
            this.INSERTAsync(Username, Key, CompanyCode, CompanyName, CompanyAddress, CompanyCity, CompanyState, CompanyZipcode, CompanyTel1, CompanyTel2, CompanyCell, CompanyFax, CompanyEmail, CompanyWebsite, CompanyComments, CompanyTaxId, null);
        }
        
        /// <remarks/>
        public void INSERTAsync(
                    string Username, 
                    string Key, 
                    string CompanyCode, 
                    string CompanyName, 
                    string CompanyAddress, 
                    string CompanyCity, 
                    string CompanyState, 
                    string CompanyZipcode, 
                    string CompanyTel1, 
                    string CompanyTel2, 
                    string CompanyCell, 
                    string CompanyFax, 
                    string CompanyEmail, 
                    string CompanyWebsite, 
                    string CompanyComments, 
                    string CompanyTaxId, 
                    object userState) {
            if ((this.INSERTOperationCompleted == null)) {
                this.INSERTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnINSERTOperationCompleted);
            }
            this.InvokeAsync("INSERT", new object[] {
                        Username,
                        Key,
                        CompanyCode,
                        CompanyName,
                        CompanyAddress,
                        CompanyCity,
                        CompanyState,
                        CompanyZipcode,
                        CompanyTel1,
                        CompanyTel2,
                        CompanyCell,
                        CompanyFax,
                        CompanyEmail,
                        CompanyWebsite,
                        CompanyComments,
                        CompanyTaxId}, this.INSERTOperationCompleted, userState);
        }
        
        private void OnINSERTOperationCompleted(object arg) {
            if ((this.INSERTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.INSERTCompleted(this, new INSERTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_company/INSERT1", RequestNamespace="http://tempuri.org/Billing/w_company", ResponseNamespace="http://tempuri.org/Billing/w_company", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet INSERT1(
                    string Username, 
                    string Key, 
                    string CompanyCode, 
                    string CompanyName, 
                    string CompanyAddress, 
                    string CompanyCity, 
                    string CompanyState, 
                    string CompanyZipcode, 
                    string CompanyTel1, 
                    string CompanyTel2, 
                    string CompanyCell, 
                    string CompanyFax, 
                    string CompanyEmail, 
                    string CompanyWebsite, 
                    string CompanyComments, 
                    string CompanyTaxId, 
                    string CompanyExternalNumber) {
            object[] results = this.Invoke("INSERT1", new object[] {
                        Username,
                        Key,
                        CompanyCode,
                        CompanyName,
                        CompanyAddress,
                        CompanyCity,
                        CompanyState,
                        CompanyZipcode,
                        CompanyTel1,
                        CompanyTel2,
                        CompanyCell,
                        CompanyFax,
                        CompanyEmail,
                        CompanyWebsite,
                        CompanyComments,
                        CompanyTaxId,
                        CompanyExternalNumber});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void INSERT1Async(
                    string Username, 
                    string Key, 
                    string CompanyCode, 
                    string CompanyName, 
                    string CompanyAddress, 
                    string CompanyCity, 
                    string CompanyState, 
                    string CompanyZipcode, 
                    string CompanyTel1, 
                    string CompanyTel2, 
                    string CompanyCell, 
                    string CompanyFax, 
                    string CompanyEmail, 
                    string CompanyWebsite, 
                    string CompanyComments, 
                    string CompanyTaxId, 
                    string CompanyExternalNumber) {
            this.INSERT1Async(Username, Key, CompanyCode, CompanyName, CompanyAddress, CompanyCity, CompanyState, CompanyZipcode, CompanyTel1, CompanyTel2, CompanyCell, CompanyFax, CompanyEmail, CompanyWebsite, CompanyComments, CompanyTaxId, CompanyExternalNumber, null);
        }
        
        /// <remarks/>
        public void INSERT1Async(
                    string Username, 
                    string Key, 
                    string CompanyCode, 
                    string CompanyName, 
                    string CompanyAddress, 
                    string CompanyCity, 
                    string CompanyState, 
                    string CompanyZipcode, 
                    string CompanyTel1, 
                    string CompanyTel2, 
                    string CompanyCell, 
                    string CompanyFax, 
                    string CompanyEmail, 
                    string CompanyWebsite, 
                    string CompanyComments, 
                    string CompanyTaxId, 
                    string CompanyExternalNumber, 
                    object userState) {
            if ((this.INSERT1OperationCompleted == null)) {
                this.INSERT1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnINSERT1OperationCompleted);
            }
            this.InvokeAsync("INSERT1", new object[] {
                        Username,
                        Key,
                        CompanyCode,
                        CompanyName,
                        CompanyAddress,
                        CompanyCity,
                        CompanyState,
                        CompanyZipcode,
                        CompanyTel1,
                        CompanyTel2,
                        CompanyCell,
                        CompanyFax,
                        CompanyEmail,
                        CompanyWebsite,
                        CompanyComments,
                        CompanyTaxId,
                        CompanyExternalNumber}, this.INSERT1OperationCompleted, userState);
        }
        
        private void OnINSERT1OperationCompleted(object arg) {
            if ((this.INSERT1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.INSERT1Completed(this, new INSERT1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_company/UPDATE", RequestNamespace="http://tempuri.org/Billing/w_company", ResponseNamespace="http://tempuri.org/Billing/w_company", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UPDATE(
                    string Username, 
                    string Key, 
                    string CompanyCode, 
                    string CompanyName, 
                    string CompanyAddress, 
                    string CompanyCity, 
                    string CompanyState, 
                    string CompanyZipcode, 
                    string CompanyTel1, 
                    string CompanyTel2, 
                    string CompanyCell, 
                    string CompanyFax, 
                    string CompanyEmail, 
                    string CompanyWebsite, 
                    string CompanyComments, 
                    string CompanyTaxId) {
            object[] results = this.Invoke("UPDATE", new object[] {
                        Username,
                        Key,
                        CompanyCode,
                        CompanyName,
                        CompanyAddress,
                        CompanyCity,
                        CompanyState,
                        CompanyZipcode,
                        CompanyTel1,
                        CompanyTel2,
                        CompanyCell,
                        CompanyFax,
                        CompanyEmail,
                        CompanyWebsite,
                        CompanyComments,
                        CompanyTaxId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UPDATEAsync(
                    string Username, 
                    string Key, 
                    string CompanyCode, 
                    string CompanyName, 
                    string CompanyAddress, 
                    string CompanyCity, 
                    string CompanyState, 
                    string CompanyZipcode, 
                    string CompanyTel1, 
                    string CompanyTel2, 
                    string CompanyCell, 
                    string CompanyFax, 
                    string CompanyEmail, 
                    string CompanyWebsite, 
                    string CompanyComments, 
                    string CompanyTaxId) {
            this.UPDATEAsync(Username, Key, CompanyCode, CompanyName, CompanyAddress, CompanyCity, CompanyState, CompanyZipcode, CompanyTel1, CompanyTel2, CompanyCell, CompanyFax, CompanyEmail, CompanyWebsite, CompanyComments, CompanyTaxId, null);
        }
        
        /// <remarks/>
        public void UPDATEAsync(
                    string Username, 
                    string Key, 
                    string CompanyCode, 
                    string CompanyName, 
                    string CompanyAddress, 
                    string CompanyCity, 
                    string CompanyState, 
                    string CompanyZipcode, 
                    string CompanyTel1, 
                    string CompanyTel2, 
                    string CompanyCell, 
                    string CompanyFax, 
                    string CompanyEmail, 
                    string CompanyWebsite, 
                    string CompanyComments, 
                    string CompanyTaxId, 
                    object userState) {
            if ((this.UPDATEOperationCompleted == null)) {
                this.UPDATEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUPDATEOperationCompleted);
            }
            this.InvokeAsync("UPDATE", new object[] {
                        Username,
                        Key,
                        CompanyCode,
                        CompanyName,
                        CompanyAddress,
                        CompanyCity,
                        CompanyState,
                        CompanyZipcode,
                        CompanyTel1,
                        CompanyTel2,
                        CompanyCell,
                        CompanyFax,
                        CompanyEmail,
                        CompanyWebsite,
                        CompanyComments,
                        CompanyTaxId}, this.UPDATEOperationCompleted, userState);
        }
        
        private void OnUPDATEOperationCompleted(object arg) {
            if ((this.UPDATECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UPDATECompleted(this, new UPDATECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_company/UPDATE1", RequestNamespace="http://tempuri.org/Billing/w_company", ResponseNamespace="http://tempuri.org/Billing/w_company", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet UPDATE1(
                    string Username, 
                    string Key, 
                    string CompanyCode, 
                    string CompanyName, 
                    string CompanyAddress, 
                    string CompanyCity, 
                    string CompanyState, 
                    string CompanyZipcode, 
                    string CompanyTel1, 
                    string CompanyTel2, 
                    string CompanyCell, 
                    string CompanyFax, 
                    string CompanyEmail, 
                    string CompanyWebsite, 
                    string CompanyComments, 
                    string CompanyTaxId, 
                    string CompanyExternalNumber) {
            object[] results = this.Invoke("UPDATE1", new object[] {
                        Username,
                        Key,
                        CompanyCode,
                        CompanyName,
                        CompanyAddress,
                        CompanyCity,
                        CompanyState,
                        CompanyZipcode,
                        CompanyTel1,
                        CompanyTel2,
                        CompanyCell,
                        CompanyFax,
                        CompanyEmail,
                        CompanyWebsite,
                        CompanyComments,
                        CompanyTaxId,
                        CompanyExternalNumber});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UPDATE1Async(
                    string Username, 
                    string Key, 
                    string CompanyCode, 
                    string CompanyName, 
                    string CompanyAddress, 
                    string CompanyCity, 
                    string CompanyState, 
                    string CompanyZipcode, 
                    string CompanyTel1, 
                    string CompanyTel2, 
                    string CompanyCell, 
                    string CompanyFax, 
                    string CompanyEmail, 
                    string CompanyWebsite, 
                    string CompanyComments, 
                    string CompanyTaxId, 
                    string CompanyExternalNumber) {
            this.UPDATE1Async(Username, Key, CompanyCode, CompanyName, CompanyAddress, CompanyCity, CompanyState, CompanyZipcode, CompanyTel1, CompanyTel2, CompanyCell, CompanyFax, CompanyEmail, CompanyWebsite, CompanyComments, CompanyTaxId, CompanyExternalNumber, null);
        }
        
        /// <remarks/>
        public void UPDATE1Async(
                    string Username, 
                    string Key, 
                    string CompanyCode, 
                    string CompanyName, 
                    string CompanyAddress, 
                    string CompanyCity, 
                    string CompanyState, 
                    string CompanyZipcode, 
                    string CompanyTel1, 
                    string CompanyTel2, 
                    string CompanyCell, 
                    string CompanyFax, 
                    string CompanyEmail, 
                    string CompanyWebsite, 
                    string CompanyComments, 
                    string CompanyTaxId, 
                    string CompanyExternalNumber, 
                    object userState) {
            if ((this.UPDATE1OperationCompleted == null)) {
                this.UPDATE1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnUPDATE1OperationCompleted);
            }
            this.InvokeAsync("UPDATE1", new object[] {
                        Username,
                        Key,
                        CompanyCode,
                        CompanyName,
                        CompanyAddress,
                        CompanyCity,
                        CompanyState,
                        CompanyZipcode,
                        CompanyTel1,
                        CompanyTel2,
                        CompanyCell,
                        CompanyFax,
                        CompanyEmail,
                        CompanyWebsite,
                        CompanyComments,
                        CompanyTaxId,
                        CompanyExternalNumber}, this.UPDATE1OperationCompleted, userState);
        }
        
        private void OnUPDATE1OperationCompleted(object arg) {
            if ((this.UPDATE1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UPDATE1Completed(this, new UPDATE1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_company/GETCUSTOMERDOCUMENTS", RequestNamespace="http://tempuri.org/Billing/w_company", ResponseNamespace="http://tempuri.org/Billing/w_company", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GETCUSTOMERDOCUMENTS(string Username, string Key, string CompanyCode) {
            object[] results = this.Invoke("GETCUSTOMERDOCUMENTS", new object[] {
                        Username,
                        Key,
                        CompanyCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GETCUSTOMERDOCUMENTSAsync(string Username, string Key, string CompanyCode) {
            this.GETCUSTOMERDOCUMENTSAsync(Username, Key, CompanyCode, null);
        }
        
        /// <remarks/>
        public void GETCUSTOMERDOCUMENTSAsync(string Username, string Key, string CompanyCode, object userState) {
            if ((this.GETCUSTOMERDOCUMENTSOperationCompleted == null)) {
                this.GETCUSTOMERDOCUMENTSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGETCUSTOMERDOCUMENTSOperationCompleted);
            }
            this.InvokeAsync("GETCUSTOMERDOCUMENTS", new object[] {
                        Username,
                        Key,
                        CompanyCode}, this.GETCUSTOMERDOCUMENTSOperationCompleted, userState);
        }
        
        private void OnGETCUSTOMERDOCUMENTSOperationCompleted(object arg) {
            if ((this.GETCUSTOMERDOCUMENTSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GETCUSTOMERDOCUMENTSCompleted(this, new GETCUSTOMERDOCUMENTSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_company/RETRIEVE", RequestNamespace="http://tempuri.org/Billing/w_company", ResponseNamespace="http://tempuri.org/Billing/w_company", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RETRIEVE(string Username, string Key, string CompanyCode) {
            object[] results = this.Invoke("RETRIEVE", new object[] {
                        Username,
                        Key,
                        CompanyCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RETRIEVEAsync(string Username, string Key, string CompanyCode) {
            this.RETRIEVEAsync(Username, Key, CompanyCode, null);
        }
        
        /// <remarks/>
        public void RETRIEVEAsync(string Username, string Key, string CompanyCode, object userState) {
            if ((this.RETRIEVEOperationCompleted == null)) {
                this.RETRIEVEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRETRIEVEOperationCompleted);
            }
            this.InvokeAsync("RETRIEVE", new object[] {
                        Username,
                        Key,
                        CompanyCode}, this.RETRIEVEOperationCompleted, userState);
        }
        
        private void OnRETRIEVEOperationCompleted(object arg) {
            if ((this.RETRIEVECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RETRIEVECompleted(this, new RETRIEVECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_company/GETLIST", RequestNamespace="http://tempuri.org/Billing/w_company", ResponseNamespace="http://tempuri.org/Billing/w_company", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GETLIST(string Username, string Key, string CompanyCodeStart, string CompanyCodeEnd, string CompanyName) {
            object[] results = this.Invoke("GETLIST", new object[] {
                        Username,
                        Key,
                        CompanyCodeStart,
                        CompanyCodeEnd,
                        CompanyName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GETLISTAsync(string Username, string Key, string CompanyCodeStart, string CompanyCodeEnd, string CompanyName) {
            this.GETLISTAsync(Username, Key, CompanyCodeStart, CompanyCodeEnd, CompanyName, null);
        }
        
        /// <remarks/>
        public void GETLISTAsync(string Username, string Key, string CompanyCodeStart, string CompanyCodeEnd, string CompanyName, object userState) {
            if ((this.GETLISTOperationCompleted == null)) {
                this.GETLISTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGETLISTOperationCompleted);
            }
            this.InvokeAsync("GETLIST", new object[] {
                        Username,
                        Key,
                        CompanyCodeStart,
                        CompanyCodeEnd,
                        CompanyName}, this.GETLISTOperationCompleted, userState);
        }
        
        private void OnGETLISTOperationCompleted(object arg) {
            if ((this.GETLISTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GETLISTCompleted(this, new GETLISTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_company/GetSet", RequestNamespace="http://tempuri.org/Billing/w_company", ResponseNamespace="http://tempuri.org/Billing/w_company", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ClientDto[] GetSet(string Username, string Key) {
            object[] results = this.Invoke("GetSet", new object[] {
                        Username,
                        Key});
            return ((ClientDto[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSetAsync(string Username, string Key) {
            this.GetSetAsync(Username, Key, null);
        }
        
        /// <remarks/>
        public void GetSetAsync(string Username, string Key, object userState) {
            if ((this.GetSetOperationCompleted == null)) {
                this.GetSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSetOperationCompleted);
            }
            this.InvokeAsync("GetSet", new object[] {
                        Username,
                        Key}, this.GetSetOperationCompleted, userState);
        }
        
        private void OnGetSetOperationCompleted(object arg) {
            if ((this.GetSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSetCompleted(this, new GetSetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Billing/w_company")]
    public partial class ClientDto {
        
        private string externalNumberField;
        
        private int idField;
        
        private string taxIDField;
        
        private bool activeField;
        
        private int paymentTermsField;
        
        private string telephone1Field;
        
        private string mobileField;
        
        private string addressField;
        
        private string zipField;
        
        private string cityField;
        
        private string faxField;
        
        private string emailField;
        
        private string nameField;
        
        /// <remarks/>
        public string ExternalNumber {
            get {
                return this.externalNumberField;
            }
            set {
                this.externalNumberField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string TaxID {
            get {
                return this.taxIDField;
            }
            set {
                this.taxIDField = value;
            }
        }
        
        /// <remarks/>
        public bool Active {
            get {
                return this.activeField;
            }
            set {
                this.activeField = value;
            }
        }
        
        /// <remarks/>
        public int PaymentTerms {
            get {
                return this.paymentTermsField;
            }
            set {
                this.paymentTermsField = value;
            }
        }
        
        /// <remarks/>
        public string Telephone1 {
            get {
                return this.telephone1Field;
            }
            set {
                this.telephone1Field = value;
            }
        }
        
        /// <remarks/>
        public string Mobile {
            get {
                return this.mobileField;
            }
            set {
                this.mobileField = value;
            }
        }
        
        /// <remarks/>
        public string Address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        public string Zip {
            get {
                return this.zipField;
            }
            set {
                this.zipField = value;
            }
        }
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string Fax {
            get {
                return this.faxField;
            }
            set {
                this.faxField = value;
            }
        }
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void INSERTCompletedEventHandler(object sender, INSERTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class INSERTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal INSERTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void INSERT1CompletedEventHandler(object sender, INSERT1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class INSERT1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal INSERT1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UPDATECompletedEventHandler(object sender, UPDATECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UPDATECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UPDATECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UPDATE1CompletedEventHandler(object sender, UPDATE1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UPDATE1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UPDATE1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GETCUSTOMERDOCUMENTSCompletedEventHandler(object sender, GETCUSTOMERDOCUMENTSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GETCUSTOMERDOCUMENTSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GETCUSTOMERDOCUMENTSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RETRIEVECompletedEventHandler(object sender, RETRIEVECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RETRIEVECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RETRIEVECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GETLISTCompletedEventHandler(object sender, GETLISTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GETLISTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GETLISTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSetCompletedEventHandler(object sender, GetSetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ClientDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ClientDto[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591