//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Ofek.Invoice4U_Receipt {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="w_receiptSoap", Namespace="http://tempuri.org/BillWebService/w_receipt")]
    public partial class w_receipt : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SENDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CREATEOperationCompleted;
        
        private System.Threading.SendOrPostCallback CREATE2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateWithPaymentMethodsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateWithPaymentMethods2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateWithPaymentMethods3OperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateReceiptOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public w_receipt() {
            this.Url = global::Ofek.Properties.Settings.Default.Ofek_Invoice4U_Receipt_w_receipt;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SENDCompletedEventHandler SENDCompleted;
        
        /// <remarks/>
        public event CREATECompletedEventHandler CREATECompleted;
        
        /// <remarks/>
        public event CREATE2CompletedEventHandler CREATE2Completed;
        
        /// <remarks/>
        public event CreateWithPaymentMethodsCompletedEventHandler CreateWithPaymentMethodsCompleted;
        
        /// <remarks/>
        public event CreateWithPaymentMethods2CompletedEventHandler CreateWithPaymentMethods2Completed;
        
        /// <remarks/>
        public event CreateWithPaymentMethods3CompletedEventHandler CreateWithPaymentMethods3Completed;
        
        /// <remarks/>
        public event CreateReceiptCompletedEventHandler CreateReceiptCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BillWebService/w_receipt/SEND", RequestNamespace="http://tempuri.org/BillWebService/w_receipt", ResponseNamespace="http://tempuri.org/BillWebService/w_receipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SEND(string Username, string Key, string ReceiptNumber, string MailTo) {
            object[] results = this.Invoke("SEND", new object[] {
                        Username,
                        Key,
                        ReceiptNumber,
                        MailTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SENDAsync(string Username, string Key, string ReceiptNumber, string MailTo) {
            this.SENDAsync(Username, Key, ReceiptNumber, MailTo, null);
        }
        
        /// <remarks/>
        public void SENDAsync(string Username, string Key, string ReceiptNumber, string MailTo, object userState) {
            if ((this.SENDOperationCompleted == null)) {
                this.SENDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSENDOperationCompleted);
            }
            this.InvokeAsync("SEND", new object[] {
                        Username,
                        Key,
                        ReceiptNumber,
                        MailTo}, this.SENDOperationCompleted, userState);
        }
        
        private void OnSENDOperationCompleted(object arg) {
            if ((this.SENDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SENDCompleted(this, new SENDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BillWebService/w_receipt/CREATE", RequestNamespace="http://tempuri.org/BillWebService/w_receipt", ResponseNamespace="http://tempuri.org/BillWebService/w_receipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CREATE(string Username, string Key, string ReceiptSubject, string InvoiceNumber, string InvoiceAmount, string NonInvoiceAmount, string Deduction, string ReceiptComments, string IsForceInvoiceClose, string CompanyCode, string MailTo) {
            object[] results = this.Invoke("CREATE", new object[] {
                        Username,
                        Key,
                        ReceiptSubject,
                        InvoiceNumber,
                        InvoiceAmount,
                        NonInvoiceAmount,
                        Deduction,
                        ReceiptComments,
                        IsForceInvoiceClose,
                        CompanyCode,
                        MailTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CREATEAsync(string Username, string Key, string ReceiptSubject, string InvoiceNumber, string InvoiceAmount, string NonInvoiceAmount, string Deduction, string ReceiptComments, string IsForceInvoiceClose, string CompanyCode, string MailTo) {
            this.CREATEAsync(Username, Key, ReceiptSubject, InvoiceNumber, InvoiceAmount, NonInvoiceAmount, Deduction, ReceiptComments, IsForceInvoiceClose, CompanyCode, MailTo, null);
        }
        
        /// <remarks/>
        public void CREATEAsync(string Username, string Key, string ReceiptSubject, string InvoiceNumber, string InvoiceAmount, string NonInvoiceAmount, string Deduction, string ReceiptComments, string IsForceInvoiceClose, string CompanyCode, string MailTo, object userState) {
            if ((this.CREATEOperationCompleted == null)) {
                this.CREATEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCREATEOperationCompleted);
            }
            this.InvokeAsync("CREATE", new object[] {
                        Username,
                        Key,
                        ReceiptSubject,
                        InvoiceNumber,
                        InvoiceAmount,
                        NonInvoiceAmount,
                        Deduction,
                        ReceiptComments,
                        IsForceInvoiceClose,
                        CompanyCode,
                        MailTo}, this.CREATEOperationCompleted, userState);
        }
        
        private void OnCREATEOperationCompleted(object arg) {
            if ((this.CREATECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CREATECompleted(this, new CREATECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BillWebService/w_receipt/CREATE2", RequestNamespace="http://tempuri.org/BillWebService/w_receipt", ResponseNamespace="http://tempuri.org/BillWebService/w_receipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CREATE2(string Username, string Key, string ReceiptSubject, string InvoiceNumber, string InvoiceAmount, string NonInvoiceAmount, string Deduction, string ReceiptComments, string IsForceInvoiceClose, string CompanyCode, string CompanyInfo, string MailTo) {
            object[] results = this.Invoke("CREATE2", new object[] {
                        Username,
                        Key,
                        ReceiptSubject,
                        InvoiceNumber,
                        InvoiceAmount,
                        NonInvoiceAmount,
                        Deduction,
                        ReceiptComments,
                        IsForceInvoiceClose,
                        CompanyCode,
                        CompanyInfo,
                        MailTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CREATE2Async(string Username, string Key, string ReceiptSubject, string InvoiceNumber, string InvoiceAmount, string NonInvoiceAmount, string Deduction, string ReceiptComments, string IsForceInvoiceClose, string CompanyCode, string CompanyInfo, string MailTo) {
            this.CREATE2Async(Username, Key, ReceiptSubject, InvoiceNumber, InvoiceAmount, NonInvoiceAmount, Deduction, ReceiptComments, IsForceInvoiceClose, CompanyCode, CompanyInfo, MailTo, null);
        }
        
        /// <remarks/>
        public void CREATE2Async(string Username, string Key, string ReceiptSubject, string InvoiceNumber, string InvoiceAmount, string NonInvoiceAmount, string Deduction, string ReceiptComments, string IsForceInvoiceClose, string CompanyCode, string CompanyInfo, string MailTo, object userState) {
            if ((this.CREATE2OperationCompleted == null)) {
                this.CREATE2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCREATE2OperationCompleted);
            }
            this.InvokeAsync("CREATE2", new object[] {
                        Username,
                        Key,
                        ReceiptSubject,
                        InvoiceNumber,
                        InvoiceAmount,
                        NonInvoiceAmount,
                        Deduction,
                        ReceiptComments,
                        IsForceInvoiceClose,
                        CompanyCode,
                        CompanyInfo,
                        MailTo}, this.CREATE2OperationCompleted, userState);
        }
        
        private void OnCREATE2OperationCompleted(object arg) {
            if ((this.CREATE2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CREATE2Completed(this, new CREATE2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BillWebService/w_receipt/CreateWithPaymentMethods", RequestNamespace="http://tempuri.org/BillWebService/w_receipt", ResponseNamespace="http://tempuri.org/BillWebService/w_receipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CreateWithPaymentMethods(
                    string Username, 
                    string Key, 
                    string ReceiptSubject, 
                    string InvoiceNumber, 
                    string InvoiceAmount, 
                    string Deduction, 
                    string ReceiptComments, 
                    string IsForceInvoiceClose, 
                    string CompanyCode, 
                    string MailTo, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcDate, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount) {
            object[] results = this.Invoke("CreateWithPaymentMethods", new object[] {
                        Username,
                        Key,
                        ReceiptSubject,
                        InvoiceNumber,
                        InvoiceAmount,
                        Deduction,
                        ReceiptComments,
                        IsForceInvoiceClose,
                        CompanyCode,
                        MailTo,
                        Cash,
                        CheckDate,
                        CheckNumber,
                        CheckAccount,
                        CheckBranch,
                        CheckBank,
                        CheckAmount,
                        CcDate,
                        CcNumber,
                        CcExpiration,
                        CcType,
                        CcVerification,
                        CcTicket,
                        CcAmount,
                        TransDate,
                        TransBank,
                        TransBranch,
                        TransAccount,
                        TransAmount});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CreateWithPaymentMethodsAsync(
                    string Username, 
                    string Key, 
                    string ReceiptSubject, 
                    string InvoiceNumber, 
                    string InvoiceAmount, 
                    string Deduction, 
                    string ReceiptComments, 
                    string IsForceInvoiceClose, 
                    string CompanyCode, 
                    string MailTo, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcDate, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount) {
            this.CreateWithPaymentMethodsAsync(Username, Key, ReceiptSubject, InvoiceNumber, InvoiceAmount, Deduction, ReceiptComments, IsForceInvoiceClose, CompanyCode, MailTo, Cash, CheckDate, CheckNumber, CheckAccount, CheckBranch, CheckBank, CheckAmount, CcDate, CcNumber, CcExpiration, CcType, CcVerification, CcTicket, CcAmount, TransDate, TransBank, TransBranch, TransAccount, TransAmount, null);
        }
        
        /// <remarks/>
        public void CreateWithPaymentMethodsAsync(
                    string Username, 
                    string Key, 
                    string ReceiptSubject, 
                    string InvoiceNumber, 
                    string InvoiceAmount, 
                    string Deduction, 
                    string ReceiptComments, 
                    string IsForceInvoiceClose, 
                    string CompanyCode, 
                    string MailTo, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcDate, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount, 
                    object userState) {
            if ((this.CreateWithPaymentMethodsOperationCompleted == null)) {
                this.CreateWithPaymentMethodsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateWithPaymentMethodsOperationCompleted);
            }
            this.InvokeAsync("CreateWithPaymentMethods", new object[] {
                        Username,
                        Key,
                        ReceiptSubject,
                        InvoiceNumber,
                        InvoiceAmount,
                        Deduction,
                        ReceiptComments,
                        IsForceInvoiceClose,
                        CompanyCode,
                        MailTo,
                        Cash,
                        CheckDate,
                        CheckNumber,
                        CheckAccount,
                        CheckBranch,
                        CheckBank,
                        CheckAmount,
                        CcDate,
                        CcNumber,
                        CcExpiration,
                        CcType,
                        CcVerification,
                        CcTicket,
                        CcAmount,
                        TransDate,
                        TransBank,
                        TransBranch,
                        TransAccount,
                        TransAmount}, this.CreateWithPaymentMethodsOperationCompleted, userState);
        }
        
        private void OnCreateWithPaymentMethodsOperationCompleted(object arg) {
            if ((this.CreateWithPaymentMethodsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateWithPaymentMethodsCompleted(this, new CreateWithPaymentMethodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BillWebService/w_receipt/CreateWithPaymentMethods2", RequestNamespace="http://tempuri.org/BillWebService/w_receipt", ResponseNamespace="http://tempuri.org/BillWebService/w_receipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CreateWithPaymentMethods2(
                    string Username, 
                    string Key, 
                    string ReceiptSubject, 
                    string InvoiceNumber, 
                    string InvoiceAmount, 
                    string Deduction, 
                    string ReceiptComments, 
                    string IsForceInvoiceClose, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcDate, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount) {
            object[] results = this.Invoke("CreateWithPaymentMethods2", new object[] {
                        Username,
                        Key,
                        ReceiptSubject,
                        InvoiceNumber,
                        InvoiceAmount,
                        Deduction,
                        ReceiptComments,
                        IsForceInvoiceClose,
                        CompanyCode,
                        CompanyInfo,
                        MailTo,
                        Cash,
                        CheckDate,
                        CheckNumber,
                        CheckAccount,
                        CheckBranch,
                        CheckBank,
                        CheckAmount,
                        CcDate,
                        CcNumber,
                        CcExpiration,
                        CcType,
                        CcVerification,
                        CcTicket,
                        CcAmount,
                        TransDate,
                        TransBank,
                        TransBranch,
                        TransAccount,
                        TransAmount});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CreateWithPaymentMethods2Async(
                    string Username, 
                    string Key, 
                    string ReceiptSubject, 
                    string InvoiceNumber, 
                    string InvoiceAmount, 
                    string Deduction, 
                    string ReceiptComments, 
                    string IsForceInvoiceClose, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcDate, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount) {
            this.CreateWithPaymentMethods2Async(Username, Key, ReceiptSubject, InvoiceNumber, InvoiceAmount, Deduction, ReceiptComments, IsForceInvoiceClose, CompanyCode, CompanyInfo, MailTo, Cash, CheckDate, CheckNumber, CheckAccount, CheckBranch, CheckBank, CheckAmount, CcDate, CcNumber, CcExpiration, CcType, CcVerification, CcTicket, CcAmount, TransDate, TransBank, TransBranch, TransAccount, TransAmount, null);
        }
        
        /// <remarks/>
        public void CreateWithPaymentMethods2Async(
                    string Username, 
                    string Key, 
                    string ReceiptSubject, 
                    string InvoiceNumber, 
                    string InvoiceAmount, 
                    string Deduction, 
                    string ReceiptComments, 
                    string IsForceInvoiceClose, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcDate, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount, 
                    object userState) {
            if ((this.CreateWithPaymentMethods2OperationCompleted == null)) {
                this.CreateWithPaymentMethods2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateWithPaymentMethods2OperationCompleted);
            }
            this.InvokeAsync("CreateWithPaymentMethods2", new object[] {
                        Username,
                        Key,
                        ReceiptSubject,
                        InvoiceNumber,
                        InvoiceAmount,
                        Deduction,
                        ReceiptComments,
                        IsForceInvoiceClose,
                        CompanyCode,
                        CompanyInfo,
                        MailTo,
                        Cash,
                        CheckDate,
                        CheckNumber,
                        CheckAccount,
                        CheckBranch,
                        CheckBank,
                        CheckAmount,
                        CcDate,
                        CcNumber,
                        CcExpiration,
                        CcType,
                        CcVerification,
                        CcTicket,
                        CcAmount,
                        TransDate,
                        TransBank,
                        TransBranch,
                        TransAccount,
                        TransAmount}, this.CreateWithPaymentMethods2OperationCompleted, userState);
        }
        
        private void OnCreateWithPaymentMethods2OperationCompleted(object arg) {
            if ((this.CreateWithPaymentMethods2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateWithPaymentMethods2Completed(this, new CreateWithPaymentMethods2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BillWebService/w_receipt/CreateWithPaymentMethods3", RequestNamespace="http://tempuri.org/BillWebService/w_receipt", ResponseNamespace="http://tempuri.org/BillWebService/w_receipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CreateWithPaymentMethods3(
                    string Username, 
                    string Key, 
                    string ReceiptSubject, 
                    string InvoiceNumber, 
                    string InvoiceAmount, 
                    string Deduction, 
                    string ReceiptComments, 
                    string IsForceInvoiceClose, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcDate, 
                    string CcPaymentNum, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount) {
            object[] results = this.Invoke("CreateWithPaymentMethods3", new object[] {
                        Username,
                        Key,
                        ReceiptSubject,
                        InvoiceNumber,
                        InvoiceAmount,
                        Deduction,
                        ReceiptComments,
                        IsForceInvoiceClose,
                        CompanyCode,
                        CompanyInfo,
                        MailTo,
                        Cash,
                        CheckDate,
                        CheckNumber,
                        CheckAccount,
                        CheckBranch,
                        CheckBank,
                        CheckAmount,
                        CcDate,
                        CcPaymentNum,
                        CcNumber,
                        CcExpiration,
                        CcType,
                        CcVerification,
                        CcTicket,
                        CcAmount,
                        TransDate,
                        TransBank,
                        TransBranch,
                        TransAccount,
                        TransAmount});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CreateWithPaymentMethods3Async(
                    string Username, 
                    string Key, 
                    string ReceiptSubject, 
                    string InvoiceNumber, 
                    string InvoiceAmount, 
                    string Deduction, 
                    string ReceiptComments, 
                    string IsForceInvoiceClose, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcDate, 
                    string CcPaymentNum, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount) {
            this.CreateWithPaymentMethods3Async(Username, Key, ReceiptSubject, InvoiceNumber, InvoiceAmount, Deduction, ReceiptComments, IsForceInvoiceClose, CompanyCode, CompanyInfo, MailTo, Cash, CheckDate, CheckNumber, CheckAccount, CheckBranch, CheckBank, CheckAmount, CcDate, CcPaymentNum, CcNumber, CcExpiration, CcType, CcVerification, CcTicket, CcAmount, TransDate, TransBank, TransBranch, TransAccount, TransAmount, null);
        }
        
        /// <remarks/>
        public void CreateWithPaymentMethods3Async(
                    string Username, 
                    string Key, 
                    string ReceiptSubject, 
                    string InvoiceNumber, 
                    string InvoiceAmount, 
                    string Deduction, 
                    string ReceiptComments, 
                    string IsForceInvoiceClose, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcDate, 
                    string CcPaymentNum, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount, 
                    object userState) {
            if ((this.CreateWithPaymentMethods3OperationCompleted == null)) {
                this.CreateWithPaymentMethods3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateWithPaymentMethods3OperationCompleted);
            }
            this.InvokeAsync("CreateWithPaymentMethods3", new object[] {
                        Username,
                        Key,
                        ReceiptSubject,
                        InvoiceNumber,
                        InvoiceAmount,
                        Deduction,
                        ReceiptComments,
                        IsForceInvoiceClose,
                        CompanyCode,
                        CompanyInfo,
                        MailTo,
                        Cash,
                        CheckDate,
                        CheckNumber,
                        CheckAccount,
                        CheckBranch,
                        CheckBank,
                        CheckAmount,
                        CcDate,
                        CcPaymentNum,
                        CcNumber,
                        CcExpiration,
                        CcType,
                        CcVerification,
                        CcTicket,
                        CcAmount,
                        TransDate,
                        TransBank,
                        TransBranch,
                        TransAccount,
                        TransAmount}, this.CreateWithPaymentMethods3OperationCompleted, userState);
        }
        
        private void OnCreateWithPaymentMethods3OperationCompleted(object arg) {
            if ((this.CreateWithPaymentMethods3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateWithPaymentMethods3Completed(this, new CreateWithPaymentMethods3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BillWebService/w_receipt/CreateReceipt", RequestNamespace="http://tempuri.org/BillWebService/w_receipt", ResponseNamespace="http://tempuri.org/BillWebService/w_receipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CreateReceipt(string Username, string Key, PaymentRequest request) {
            object[] results = this.Invoke("CreateReceipt", new object[] {
                        Username,
                        Key,
                        request});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CreateReceiptAsync(string Username, string Key, PaymentRequest request) {
            this.CreateReceiptAsync(Username, Key, request, null);
        }
        
        /// <remarks/>
        public void CreateReceiptAsync(string Username, string Key, PaymentRequest request, object userState) {
            if ((this.CreateReceiptOperationCompleted == null)) {
                this.CreateReceiptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateReceiptOperationCompleted);
            }
            this.InvokeAsync("CreateReceipt", new object[] {
                        Username,
                        Key,
                        request}, this.CreateReceiptOperationCompleted, userState);
        }
        
        private void OnCreateReceiptOperationCompleted(object arg) {
            if ((this.CreateReceiptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateReceiptCompleted(this, new CreateReceiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/BillWebService/w_receipt")]
    public partial class PaymentRequest {
        
        private string currencyTargetField;
        
        private string keyField;
        
        private string invoiceSubjectField;
        
        private string invoiceDiscountField;
        
        private string invoiceDiscountRateField;
        
        private string invoiceItemCodeField;
        
        private string invoiceItemDescriptionField;
        
        private string invoiceItemQuantityField;
        
        private string invoiceItemPriceField;
        
        private string invoiceTaxRateField;
        
        private string invoiceCommentsField;
        
        private string companyCodeField;
        
        private string companyInfoField;
        
        private string mailToField;
        
        private string isItemPriceWithTaxField;
        
        private string cashField;
        
        private string checkDateField;
        
        private string checkNumberField;
        
        private string checkAccountField;
        
        private string checkBranchField;
        
        private string checkBankField;
        
        private string checkAmountField;
        
        private string ccNumberField;
        
        private string ccExpirationField;
        
        private string ccTypeField;
        
        private string ccVerificationField;
        
        private string ccTicketField;
        
        private string ccAmountField;
        
        private string ccPaymentNumField;
        
        private string ccDateField;
        
        private string cVVField;
        
        private string cCcurrencyField;
        
        private string transDateField;
        
        private string transBankField;
        
        private string transBranchField;
        
        private string transAccountField;
        
        private string transAmountField;
        
        private string userHTMLField;
        
        private string transactionIDField;
        
        private string docNumField;
        
        private string discountAfterTaxField;
        
        private string uniqueIdentifierField;
        
        private string deductionField;
        
        private string isForceInvoiceCloseField;
        
        private string payPalTransactionIDField;
        
        private string invoiceIDField;
        
        /// <remarks/>
        public string CurrencyTarget {
            get {
                return this.currencyTargetField;
            }
            set {
                this.currencyTargetField = value;
            }
        }
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceSubject {
            get {
                return this.invoiceSubjectField;
            }
            set {
                this.invoiceSubjectField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceDiscount {
            get {
                return this.invoiceDiscountField;
            }
            set {
                this.invoiceDiscountField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceDiscountRate {
            get {
                return this.invoiceDiscountRateField;
            }
            set {
                this.invoiceDiscountRateField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceItemCode {
            get {
                return this.invoiceItemCodeField;
            }
            set {
                this.invoiceItemCodeField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceItemDescription {
            get {
                return this.invoiceItemDescriptionField;
            }
            set {
                this.invoiceItemDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceItemQuantity {
            get {
                return this.invoiceItemQuantityField;
            }
            set {
                this.invoiceItemQuantityField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceItemPrice {
            get {
                return this.invoiceItemPriceField;
            }
            set {
                this.invoiceItemPriceField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceTaxRate {
            get {
                return this.invoiceTaxRateField;
            }
            set {
                this.invoiceTaxRateField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceComments {
            get {
                return this.invoiceCommentsField;
            }
            set {
                this.invoiceCommentsField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyCode {
            get {
                return this.companyCodeField;
            }
            set {
                this.companyCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyInfo {
            get {
                return this.companyInfoField;
            }
            set {
                this.companyInfoField = value;
            }
        }
        
        /// <remarks/>
        public string MailTo {
            get {
                return this.mailToField;
            }
            set {
                this.mailToField = value;
            }
        }
        
        /// <remarks/>
        public string IsItemPriceWithTax {
            get {
                return this.isItemPriceWithTaxField;
            }
            set {
                this.isItemPriceWithTaxField = value;
            }
        }
        
        /// <remarks/>
        public string Cash {
            get {
                return this.cashField;
            }
            set {
                this.cashField = value;
            }
        }
        
        /// <remarks/>
        public string CheckDate {
            get {
                return this.checkDateField;
            }
            set {
                this.checkDateField = value;
            }
        }
        
        /// <remarks/>
        public string CheckNumber {
            get {
                return this.checkNumberField;
            }
            set {
                this.checkNumberField = value;
            }
        }
        
        /// <remarks/>
        public string CheckAccount {
            get {
                return this.checkAccountField;
            }
            set {
                this.checkAccountField = value;
            }
        }
        
        /// <remarks/>
        public string CheckBranch {
            get {
                return this.checkBranchField;
            }
            set {
                this.checkBranchField = value;
            }
        }
        
        /// <remarks/>
        public string CheckBank {
            get {
                return this.checkBankField;
            }
            set {
                this.checkBankField = value;
            }
        }
        
        /// <remarks/>
        public string CheckAmount {
            get {
                return this.checkAmountField;
            }
            set {
                this.checkAmountField = value;
            }
        }
        
        /// <remarks/>
        public string CcNumber {
            get {
                return this.ccNumberField;
            }
            set {
                this.ccNumberField = value;
            }
        }
        
        /// <remarks/>
        public string CcExpiration {
            get {
                return this.ccExpirationField;
            }
            set {
                this.ccExpirationField = value;
            }
        }
        
        /// <remarks/>
        public string CcType {
            get {
                return this.ccTypeField;
            }
            set {
                this.ccTypeField = value;
            }
        }
        
        /// <remarks/>
        public string CcVerification {
            get {
                return this.ccVerificationField;
            }
            set {
                this.ccVerificationField = value;
            }
        }
        
        /// <remarks/>
        public string CcTicket {
            get {
                return this.ccTicketField;
            }
            set {
                this.ccTicketField = value;
            }
        }
        
        /// <remarks/>
        public string CcAmount {
            get {
                return this.ccAmountField;
            }
            set {
                this.ccAmountField = value;
            }
        }
        
        /// <remarks/>
        public string CcPaymentNum {
            get {
                return this.ccPaymentNumField;
            }
            set {
                this.ccPaymentNumField = value;
            }
        }
        
        /// <remarks/>
        public string CcDate {
            get {
                return this.ccDateField;
            }
            set {
                this.ccDateField = value;
            }
        }
        
        /// <remarks/>
        public string CVV {
            get {
                return this.cVVField;
            }
            set {
                this.cVVField = value;
            }
        }
        
        /// <remarks/>
        public string CCcurrency {
            get {
                return this.cCcurrencyField;
            }
            set {
                this.cCcurrencyField = value;
            }
        }
        
        /// <remarks/>
        public string TransDate {
            get {
                return this.transDateField;
            }
            set {
                this.transDateField = value;
            }
        }
        
        /// <remarks/>
        public string TransBank {
            get {
                return this.transBankField;
            }
            set {
                this.transBankField = value;
            }
        }
        
        /// <remarks/>
        public string TransBranch {
            get {
                return this.transBranchField;
            }
            set {
                this.transBranchField = value;
            }
        }
        
        /// <remarks/>
        public string TransAccount {
            get {
                return this.transAccountField;
            }
            set {
                this.transAccountField = value;
            }
        }
        
        /// <remarks/>
        public string TransAmount {
            get {
                return this.transAmountField;
            }
            set {
                this.transAmountField = value;
            }
        }
        
        /// <remarks/>
        public string UserHTML {
            get {
                return this.userHTMLField;
            }
            set {
                this.userHTMLField = value;
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                return this.transactionIDField;
            }
            set {
                this.transactionIDField = value;
            }
        }
        
        /// <remarks/>
        public string DocNum {
            get {
                return this.docNumField;
            }
            set {
                this.docNumField = value;
            }
        }
        
        /// <remarks/>
        public string DiscountAfterTax {
            get {
                return this.discountAfterTaxField;
            }
            set {
                this.discountAfterTaxField = value;
            }
        }
        
        /// <remarks/>
        public string UniqueIdentifier {
            get {
                return this.uniqueIdentifierField;
            }
            set {
                this.uniqueIdentifierField = value;
            }
        }
        
        /// <remarks/>
        public string Deduction {
            get {
                return this.deductionField;
            }
            set {
                this.deductionField = value;
            }
        }
        
        /// <remarks/>
        public string IsForceInvoiceClose {
            get {
                return this.isForceInvoiceCloseField;
            }
            set {
                this.isForceInvoiceCloseField = value;
            }
        }
        
        /// <remarks/>
        public string PayPalTransactionID {
            get {
                return this.payPalTransactionIDField;
            }
            set {
                this.payPalTransactionIDField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceID {
            get {
                return this.invoiceIDField;
            }
            set {
                this.invoiceIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SENDCompletedEventHandler(object sender, SENDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SENDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SENDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CREATECompletedEventHandler(object sender, CREATECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CREATECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CREATECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CREATE2CompletedEventHandler(object sender, CREATE2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CREATE2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CREATE2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CreateWithPaymentMethodsCompletedEventHandler(object sender, CreateWithPaymentMethodsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateWithPaymentMethodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateWithPaymentMethodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CreateWithPaymentMethods2CompletedEventHandler(object sender, CreateWithPaymentMethods2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateWithPaymentMethods2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateWithPaymentMethods2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CreateWithPaymentMethods3CompletedEventHandler(object sender, CreateWithPaymentMethods3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateWithPaymentMethods3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateWithPaymentMethods3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CreateReceiptCompletedEventHandler(object sender, CreateReceiptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateReceiptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateReceiptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591