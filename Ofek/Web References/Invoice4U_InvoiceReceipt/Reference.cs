//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Ofek.Invoice4U_InvoiceReceipt {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="w_invoicereceiptSoap", Namespace="http://tempuri.org/Billing/w_invoicereceipt")]
    public partial class w_invoicereceipt : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SENDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CREATEOperationCompleted;
        
        private System.Threading.SendOrPostCallback CREATE_CONVERTOperationCompleted;
        
        private System.Threading.SendOrPostCallback CREATE101OperationCompleted;
        
        private System.Threading.SendOrPostCallback CREATE102OperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateWithPaymentMethodsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateWithPaymentMethods2OperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateWithPaymentMethods3OperationCompleted;
        
        private System.Threading.SendOrPostCallback CreatePayPalOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateWithClearingOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateWithPaymentPelecardOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateInvoiceReceiptOperationCompleted;
        
        private System.Threading.SendOrPostCallback DocumentExistsOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsAliveOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public w_invoicereceipt() {
            this.Url = global::Ofek.Properties.Settings.Default.Ofek_Invoice4U_InvoiceReceipt_w_invoicereceipt;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SENDCompletedEventHandler SENDCompleted;
        
        /// <remarks/>
        public event CREATECompletedEventHandler CREATECompleted;
        
        /// <remarks/>
        public event CREATE_CONVERTCompletedEventHandler CREATE_CONVERTCompleted;
        
        /// <remarks/>
        public event CREATE101CompletedEventHandler CREATE101Completed;
        
        /// <remarks/>
        public event CREATE102CompletedEventHandler CREATE102Completed;
        
        /// <remarks/>
        public event CreateWithPaymentMethodsCompletedEventHandler CreateWithPaymentMethodsCompleted;
        
        /// <remarks/>
        public event CreateWithPaymentMethods2CompletedEventHandler CreateWithPaymentMethods2Completed;
        
        /// <remarks/>
        public event CreateWithPaymentMethods3CompletedEventHandler CreateWithPaymentMethods3Completed;
        
        /// <remarks/>
        public event CreatePayPalCompletedEventHandler CreatePayPalCompleted;
        
        /// <remarks/>
        public event CreateWithClearingCompletedEventHandler CreateWithClearingCompleted;
        
        /// <remarks/>
        public event CreateWithPaymentPelecardCompletedEventHandler CreateWithPaymentPelecardCompleted;
        
        /// <remarks/>
        public event CreateInvoiceReceiptCompletedEventHandler CreateInvoiceReceiptCompleted;
        
        /// <remarks/>
        public event DocumentExistsCompletedEventHandler DocumentExistsCompleted;
        
        /// <remarks/>
        public event IsAliveCompletedEventHandler IsAliveCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_invoicereceipt/SEND", RequestNamespace="http://tempuri.org/Billing/w_invoicereceipt", ResponseNamespace="http://tempuri.org/Billing/w_invoicereceipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SEND(string Username, string Key, string InvoiceReceiptNumber, string MailTo) {
            object[] results = this.Invoke("SEND", new object[] {
                        Username,
                        Key,
                        InvoiceReceiptNumber,
                        MailTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SENDAsync(string Username, string Key, string InvoiceReceiptNumber, string MailTo) {
            this.SENDAsync(Username, Key, InvoiceReceiptNumber, MailTo, null);
        }
        
        /// <remarks/>
        public void SENDAsync(string Username, string Key, string InvoiceReceiptNumber, string MailTo, object userState) {
            if ((this.SENDOperationCompleted == null)) {
                this.SENDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSENDOperationCompleted);
            }
            this.InvokeAsync("SEND", new object[] {
                        Username,
                        Key,
                        InvoiceReceiptNumber,
                        MailTo}, this.SENDOperationCompleted, userState);
        }
        
        private void OnSENDOperationCompleted(object arg) {
            if ((this.SENDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SENDCompleted(this, new SENDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_invoicereceipt/CREATE", RequestNamespace="http://tempuri.org/Billing/w_invoicereceipt", ResponseNamespace="http://tempuri.org/Billing/w_invoicereceipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CREATE(string Username, string Key, string InvoiceDate, string InvoiceSubject, string InvoiceDiscount, string InvoiceDiscountRate, string InvoiceItemCode, string InvoiceItemDescription, string InvoiceItemQuantity, string InvoiceItemPrice, string InvoiceTaxRate, string InvoiceComments, string CompanyCode, string CompanyInfo, string MailTo) {
            object[] results = this.Invoke("CREATE", new object[] {
                        Username,
                        Key,
                        InvoiceDate,
                        InvoiceSubject,
                        InvoiceDiscount,
                        InvoiceDiscountRate,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyCode,
                        CompanyInfo,
                        MailTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CREATEAsync(string Username, string Key, string InvoiceDate, string InvoiceSubject, string InvoiceDiscount, string InvoiceDiscountRate, string InvoiceItemCode, string InvoiceItemDescription, string InvoiceItemQuantity, string InvoiceItemPrice, string InvoiceTaxRate, string InvoiceComments, string CompanyCode, string CompanyInfo, string MailTo) {
            this.CREATEAsync(Username, Key, InvoiceDate, InvoiceSubject, InvoiceDiscount, InvoiceDiscountRate, InvoiceItemCode, InvoiceItemDescription, InvoiceItemQuantity, InvoiceItemPrice, InvoiceTaxRate, InvoiceComments, CompanyCode, CompanyInfo, MailTo, null);
        }
        
        /// <remarks/>
        public void CREATEAsync(
                    string Username, 
                    string Key, 
                    string InvoiceDate, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    object userState) {
            if ((this.CREATEOperationCompleted == null)) {
                this.CREATEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCREATEOperationCompleted);
            }
            this.InvokeAsync("CREATE", new object[] {
                        Username,
                        Key,
                        InvoiceDate,
                        InvoiceSubject,
                        InvoiceDiscount,
                        InvoiceDiscountRate,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyCode,
                        CompanyInfo,
                        MailTo}, this.CREATEOperationCompleted, userState);
        }
        
        private void OnCREATEOperationCompleted(object arg) {
            if ((this.CREATECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CREATECompleted(this, new CREATECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_invoicereceipt/CREATE_CONVERT", RequestNamespace="http://tempuri.org/Billing/w_invoicereceipt", ResponseNamespace="http://tempuri.org/Billing/w_invoicereceipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CREATE_CONVERT(
                    string CurrencySource, 
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceDate, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo) {
            object[] results = this.Invoke("CREATE_CONVERT", new object[] {
                        CurrencySource,
                        CurrencyTarget,
                        Username,
                        Key,
                        InvoiceDate,
                        InvoiceSubject,
                        InvoiceDiscount,
                        InvoiceDiscountRate,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyCode,
                        CompanyInfo,
                        MailTo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CREATE_CONVERTAsync(
                    string CurrencySource, 
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceDate, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo) {
            this.CREATE_CONVERTAsync(CurrencySource, CurrencyTarget, Username, Key, InvoiceDate, InvoiceSubject, InvoiceDiscount, InvoiceDiscountRate, InvoiceItemCode, InvoiceItemDescription, InvoiceItemQuantity, InvoiceItemPrice, InvoiceTaxRate, InvoiceComments, CompanyCode, CompanyInfo, MailTo, null);
        }
        
        /// <remarks/>
        public void CREATE_CONVERTAsync(
                    string CurrencySource, 
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceDate, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    object userState) {
            if ((this.CREATE_CONVERTOperationCompleted == null)) {
                this.CREATE_CONVERTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCREATE_CONVERTOperationCompleted);
            }
            this.InvokeAsync("CREATE_CONVERT", new object[] {
                        CurrencySource,
                        CurrencyTarget,
                        Username,
                        Key,
                        InvoiceDate,
                        InvoiceSubject,
                        InvoiceDiscount,
                        InvoiceDiscountRate,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyCode,
                        CompanyInfo,
                        MailTo}, this.CREATE_CONVERTOperationCompleted, userState);
        }
        
        private void OnCREATE_CONVERTOperationCompleted(object arg) {
            if ((this.CREATE_CONVERTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CREATE_CONVERTCompleted(this, new CREATE_CONVERTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_invoicereceipt/CREATE101", RequestNamespace="http://tempuri.org/Billing/w_invoicereceipt", ResponseNamespace="http://tempuri.org/Billing/w_invoicereceipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CREATE101(
                    string CurrencySource, 
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string ItemPriceIsWithTax) {
            object[] results = this.Invoke("CREATE101", new object[] {
                        CurrencySource,
                        CurrencyTarget,
                        Username,
                        Key,
                        InvoiceSubject,
                        InvoiceDiscount,
                        InvoiceDiscountRate,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyCode,
                        CompanyInfo,
                        MailTo,
                        ItemPriceIsWithTax});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CREATE101Async(
                    string CurrencySource, 
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string ItemPriceIsWithTax) {
            this.CREATE101Async(CurrencySource, CurrencyTarget, Username, Key, InvoiceSubject, InvoiceDiscount, InvoiceDiscountRate, InvoiceItemCode, InvoiceItemDescription, InvoiceItemQuantity, InvoiceItemPrice, InvoiceTaxRate, InvoiceComments, CompanyCode, CompanyInfo, MailTo, ItemPriceIsWithTax, null);
        }
        
        /// <remarks/>
        public void CREATE101Async(
                    string CurrencySource, 
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string ItemPriceIsWithTax, 
                    object userState) {
            if ((this.CREATE101OperationCompleted == null)) {
                this.CREATE101OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCREATE101OperationCompleted);
            }
            this.InvokeAsync("CREATE101", new object[] {
                        CurrencySource,
                        CurrencyTarget,
                        Username,
                        Key,
                        InvoiceSubject,
                        InvoiceDiscount,
                        InvoiceDiscountRate,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyCode,
                        CompanyInfo,
                        MailTo,
                        ItemPriceIsWithTax}, this.CREATE101OperationCompleted, userState);
        }
        
        private void OnCREATE101OperationCompleted(object arg) {
            if ((this.CREATE101Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CREATE101Completed(this, new CREATE101CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_invoicereceipt/CREATE102", RequestNamespace="http://tempuri.org/Billing/w_invoicereceipt", ResponseNamespace="http://tempuri.org/Billing/w_invoicereceipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CREATE102(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax) {
            object[] results = this.Invoke("CREATE102", new object[] {
                        CurrencyTarget,
                        Username,
                        Key,
                        InvoiceSubject,
                        InvoiceDiscount,
                        InvoiceDiscountRate,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyCode,
                        CompanyInfo,
                        MailTo,
                        IsItemPriceWithTax});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CREATE102Async(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax) {
            this.CREATE102Async(CurrencyTarget, Username, Key, InvoiceSubject, InvoiceDiscount, InvoiceDiscountRate, InvoiceItemCode, InvoiceItemDescription, InvoiceItemQuantity, InvoiceItemPrice, InvoiceTaxRate, InvoiceComments, CompanyCode, CompanyInfo, MailTo, IsItemPriceWithTax, null);
        }
        
        /// <remarks/>
        public void CREATE102Async(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax, 
                    object userState) {
            if ((this.CREATE102OperationCompleted == null)) {
                this.CREATE102OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCREATE102OperationCompleted);
            }
            this.InvokeAsync("CREATE102", new object[] {
                        CurrencyTarget,
                        Username,
                        Key,
                        InvoiceSubject,
                        InvoiceDiscount,
                        InvoiceDiscountRate,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyCode,
                        CompanyInfo,
                        MailTo,
                        IsItemPriceWithTax}, this.CREATE102OperationCompleted, userState);
        }
        
        private void OnCREATE102OperationCompleted(object arg) {
            if ((this.CREATE102Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CREATE102Completed(this, new CREATE102CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_invoicereceipt/CreateWithPaymentMethods", RequestNamespace="http://tempuri.org/Billing/w_invoicereceipt", ResponseNamespace="http://tempuri.org/Billing/w_invoicereceipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CreateWithPaymentMethods(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string CcDate, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount) {
            object[] results = this.Invoke("CreateWithPaymentMethods", new object[] {
                        CurrencyTarget,
                        Username,
                        Key,
                        InvoiceSubject,
                        InvoiceDiscount,
                        InvoiceDiscountRate,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyCode,
                        CompanyInfo,
                        MailTo,
                        IsItemPriceWithTax,
                        Cash,
                        CheckDate,
                        CheckNumber,
                        CheckAccount,
                        CheckBranch,
                        CheckBank,
                        CheckAmount,
                        CcNumber,
                        CcExpiration,
                        CcType,
                        CcVerification,
                        CcTicket,
                        CcAmount,
                        CcDate,
                        TransDate,
                        TransBank,
                        TransBranch,
                        TransAccount,
                        TransAmount});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CreateWithPaymentMethodsAsync(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string CcDate, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount) {
            this.CreateWithPaymentMethodsAsync(CurrencyTarget, Username, Key, InvoiceSubject, InvoiceDiscount, InvoiceDiscountRate, InvoiceItemCode, InvoiceItemDescription, InvoiceItemQuantity, InvoiceItemPrice, InvoiceTaxRate, InvoiceComments, CompanyCode, CompanyInfo, MailTo, IsItemPriceWithTax, Cash, CheckDate, CheckNumber, CheckAccount, CheckBranch, CheckBank, CheckAmount, CcNumber, CcExpiration, CcType, CcVerification, CcTicket, CcAmount, CcDate, TransDate, TransBank, TransBranch, TransAccount, TransAmount, null);
        }
        
        /// <remarks/>
        public void CreateWithPaymentMethodsAsync(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string CcDate, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount, 
                    object userState) {
            if ((this.CreateWithPaymentMethodsOperationCompleted == null)) {
                this.CreateWithPaymentMethodsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateWithPaymentMethodsOperationCompleted);
            }
            this.InvokeAsync("CreateWithPaymentMethods", new object[] {
                        CurrencyTarget,
                        Username,
                        Key,
                        InvoiceSubject,
                        InvoiceDiscount,
                        InvoiceDiscountRate,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyCode,
                        CompanyInfo,
                        MailTo,
                        IsItemPriceWithTax,
                        Cash,
                        CheckDate,
                        CheckNumber,
                        CheckAccount,
                        CheckBranch,
                        CheckBank,
                        CheckAmount,
                        CcNumber,
                        CcExpiration,
                        CcType,
                        CcVerification,
                        CcTicket,
                        CcAmount,
                        CcDate,
                        TransDate,
                        TransBank,
                        TransBranch,
                        TransAccount,
                        TransAmount}, this.CreateWithPaymentMethodsOperationCompleted, userState);
        }
        
        private void OnCreateWithPaymentMethodsOperationCompleted(object arg) {
            if ((this.CreateWithPaymentMethodsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateWithPaymentMethodsCompleted(this, new CreateWithPaymentMethodsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_invoicereceipt/CreateWithPaymentMethods2", RequestNamespace="http://tempuri.org/Billing/w_invoicereceipt", ResponseNamespace="http://tempuri.org/Billing/w_invoicereceipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CreateWithPaymentMethods2(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcNumber, 
                    string CcPaymentNum, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string CcDate, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount) {
            object[] results = this.Invoke("CreateWithPaymentMethods2", new object[] {
                        CurrencyTarget,
                        Username,
                        Key,
                        InvoiceSubject,
                        InvoiceDiscount,
                        InvoiceDiscountRate,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyCode,
                        CompanyInfo,
                        MailTo,
                        IsItemPriceWithTax,
                        Cash,
                        CheckDate,
                        CheckNumber,
                        CheckAccount,
                        CheckBranch,
                        CheckBank,
                        CheckAmount,
                        CcNumber,
                        CcPaymentNum,
                        CcExpiration,
                        CcType,
                        CcVerification,
                        CcTicket,
                        CcAmount,
                        CcDate,
                        TransDate,
                        TransBank,
                        TransBranch,
                        TransAccount,
                        TransAmount});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CreateWithPaymentMethods2Async(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcNumber, 
                    string CcPaymentNum, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string CcDate, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount) {
            this.CreateWithPaymentMethods2Async(CurrencyTarget, Username, Key, InvoiceSubject, InvoiceDiscount, InvoiceDiscountRate, InvoiceItemCode, InvoiceItemDescription, InvoiceItemQuantity, InvoiceItemPrice, InvoiceTaxRate, InvoiceComments, CompanyCode, CompanyInfo, MailTo, IsItemPriceWithTax, Cash, CheckDate, CheckNumber, CheckAccount, CheckBranch, CheckBank, CheckAmount, CcNumber, CcPaymentNum, CcExpiration, CcType, CcVerification, CcTicket, CcAmount, CcDate, TransDate, TransBank, TransBranch, TransAccount, TransAmount, null);
        }
        
        /// <remarks/>
        public void CreateWithPaymentMethods2Async(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcNumber, 
                    string CcPaymentNum, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string CcDate, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount, 
                    object userState) {
            if ((this.CreateWithPaymentMethods2OperationCompleted == null)) {
                this.CreateWithPaymentMethods2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateWithPaymentMethods2OperationCompleted);
            }
            this.InvokeAsync("CreateWithPaymentMethods2", new object[] {
                        CurrencyTarget,
                        Username,
                        Key,
                        InvoiceSubject,
                        InvoiceDiscount,
                        InvoiceDiscountRate,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyCode,
                        CompanyInfo,
                        MailTo,
                        IsItemPriceWithTax,
                        Cash,
                        CheckDate,
                        CheckNumber,
                        CheckAccount,
                        CheckBranch,
                        CheckBank,
                        CheckAmount,
                        CcNumber,
                        CcPaymentNum,
                        CcExpiration,
                        CcType,
                        CcVerification,
                        CcTicket,
                        CcAmount,
                        CcDate,
                        TransDate,
                        TransBank,
                        TransBranch,
                        TransAccount,
                        TransAmount}, this.CreateWithPaymentMethods2OperationCompleted, userState);
        }
        
        private void OnCreateWithPaymentMethods2OperationCompleted(object arg) {
            if ((this.CreateWithPaymentMethods2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateWithPaymentMethods2Completed(this, new CreateWithPaymentMethods2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_invoicereceipt/CreateWithPaymentMethods3", RequestNamespace="http://tempuri.org/Billing/w_invoicereceipt", ResponseNamespace="http://tempuri.org/Billing/w_invoicereceipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CreateWithPaymentMethods3(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcNumber, 
                    string CcPaymentNum, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string CcDate, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount, 
                    string UniqueIdentifier) {
            object[] results = this.Invoke("CreateWithPaymentMethods3", new object[] {
                        CurrencyTarget,
                        Username,
                        Key,
                        InvoiceSubject,
                        InvoiceDiscount,
                        InvoiceDiscountRate,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyCode,
                        CompanyInfo,
                        MailTo,
                        IsItemPriceWithTax,
                        Cash,
                        CheckDate,
                        CheckNumber,
                        CheckAccount,
                        CheckBranch,
                        CheckBank,
                        CheckAmount,
                        CcNumber,
                        CcPaymentNum,
                        CcExpiration,
                        CcType,
                        CcVerification,
                        CcTicket,
                        CcAmount,
                        CcDate,
                        TransDate,
                        TransBank,
                        TransBranch,
                        TransAccount,
                        TransAmount,
                        UniqueIdentifier});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CreateWithPaymentMethods3Async(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcNumber, 
                    string CcPaymentNum, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string CcDate, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount, 
                    string UniqueIdentifier) {
            this.CreateWithPaymentMethods3Async(CurrencyTarget, Username, Key, InvoiceSubject, InvoiceDiscount, InvoiceDiscountRate, InvoiceItemCode, InvoiceItemDescription, InvoiceItemQuantity, InvoiceItemPrice, InvoiceTaxRate, InvoiceComments, CompanyCode, CompanyInfo, MailTo, IsItemPriceWithTax, Cash, CheckDate, CheckNumber, CheckAccount, CheckBranch, CheckBank, CheckAmount, CcNumber, CcPaymentNum, CcExpiration, CcType, CcVerification, CcTicket, CcAmount, CcDate, TransDate, TransBank, TransBranch, TransAccount, TransAmount, UniqueIdentifier, null);
        }
        
        /// <remarks/>
        public void CreateWithPaymentMethods3Async(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceDiscount, 
                    string InvoiceDiscountRate, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyCode, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax, 
                    string Cash, 
                    string CheckDate, 
                    string CheckNumber, 
                    string CheckAccount, 
                    string CheckBranch, 
                    string CheckBank, 
                    string CheckAmount, 
                    string CcNumber, 
                    string CcPaymentNum, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string CcDate, 
                    string TransDate, 
                    string TransBank, 
                    string TransBranch, 
                    string TransAccount, 
                    string TransAmount, 
                    string UniqueIdentifier, 
                    object userState) {
            if ((this.CreateWithPaymentMethods3OperationCompleted == null)) {
                this.CreateWithPaymentMethods3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateWithPaymentMethods3OperationCompleted);
            }
            this.InvokeAsync("CreateWithPaymentMethods3", new object[] {
                        CurrencyTarget,
                        Username,
                        Key,
                        InvoiceSubject,
                        InvoiceDiscount,
                        InvoiceDiscountRate,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyCode,
                        CompanyInfo,
                        MailTo,
                        IsItemPriceWithTax,
                        Cash,
                        CheckDate,
                        CheckNumber,
                        CheckAccount,
                        CheckBranch,
                        CheckBank,
                        CheckAmount,
                        CcNumber,
                        CcPaymentNum,
                        CcExpiration,
                        CcType,
                        CcVerification,
                        CcTicket,
                        CcAmount,
                        CcDate,
                        TransDate,
                        TransBank,
                        TransBranch,
                        TransAccount,
                        TransAmount,
                        UniqueIdentifier}, this.CreateWithPaymentMethods3OperationCompleted, userState);
        }
        
        private void OnCreateWithPaymentMethods3OperationCompleted(object arg) {
            if ((this.CreateWithPaymentMethods3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateWithPaymentMethods3Completed(this, new CreateWithPaymentMethods3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_invoicereceipt/CreatePayPal", RequestNamespace="http://tempuri.org/Billing/w_invoicereceipt", ResponseNamespace="http://tempuri.org/Billing/w_invoicereceipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CreatePayPal(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string CcDate, 
                    string PayPalTransID) {
            object[] results = this.Invoke("CreatePayPal", new object[] {
                        CurrencyTarget,
                        Username,
                        Key,
                        InvoiceSubject,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyInfo,
                        MailTo,
                        IsItemPriceWithTax,
                        CcNumber,
                        CcExpiration,
                        CcType,
                        CcVerification,
                        CcTicket,
                        CcAmount,
                        CcDate,
                        PayPalTransID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CreatePayPalAsync(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string CcDate, 
                    string PayPalTransID) {
            this.CreatePayPalAsync(CurrencyTarget, Username, Key, InvoiceSubject, InvoiceItemCode, InvoiceItemDescription, InvoiceItemQuantity, InvoiceItemPrice, InvoiceTaxRate, InvoiceComments, CompanyInfo, MailTo, IsItemPriceWithTax, CcNumber, CcExpiration, CcType, CcVerification, CcTicket, CcAmount, CcDate, PayPalTransID, null);
        }
        
        /// <remarks/>
        public void CreatePayPalAsync(
                    string CurrencyTarget, 
                    string Username, 
                    string Key, 
                    string InvoiceSubject, 
                    string InvoiceItemCode, 
                    string InvoiceItemDescription, 
                    string InvoiceItemQuantity, 
                    string InvoiceItemPrice, 
                    string InvoiceTaxRate, 
                    string InvoiceComments, 
                    string CompanyInfo, 
                    string MailTo, 
                    string IsItemPriceWithTax, 
                    string CcNumber, 
                    string CcExpiration, 
                    string CcType, 
                    string CcVerification, 
                    string CcTicket, 
                    string CcAmount, 
                    string CcDate, 
                    string PayPalTransID, 
                    object userState) {
            if ((this.CreatePayPalOperationCompleted == null)) {
                this.CreatePayPalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePayPalOperationCompleted);
            }
            this.InvokeAsync("CreatePayPal", new object[] {
                        CurrencyTarget,
                        Username,
                        Key,
                        InvoiceSubject,
                        InvoiceItemCode,
                        InvoiceItemDescription,
                        InvoiceItemQuantity,
                        InvoiceItemPrice,
                        InvoiceTaxRate,
                        InvoiceComments,
                        CompanyInfo,
                        MailTo,
                        IsItemPriceWithTax,
                        CcNumber,
                        CcExpiration,
                        CcType,
                        CcVerification,
                        CcTicket,
                        CcAmount,
                        CcDate,
                        PayPalTransID}, this.CreatePayPalOperationCompleted, userState);
        }
        
        private void OnCreatePayPalOperationCompleted(object arg) {
            if ((this.CreatePayPalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePayPalCompleted(this, new CreatePayPalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_invoicereceipt/CreateWithClearing", RequestNamespace="http://tempuri.org/Billing/w_invoicereceipt", ResponseNamespace="http://tempuri.org/Billing/w_invoicereceipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RequestResults[] CreateWithClearing(string key, string UserName, PaymentRequest[] request, bool toCharge) {
            object[] results = this.Invoke("CreateWithClearing", new object[] {
                        key,
                        UserName,
                        request,
                        toCharge});
            return ((RequestResults[])(results[0]));
        }
        
        /// <remarks/>
        public void CreateWithClearingAsync(string key, string UserName, PaymentRequest[] request, bool toCharge) {
            this.CreateWithClearingAsync(key, UserName, request, toCharge, null);
        }
        
        /// <remarks/>
        public void CreateWithClearingAsync(string key, string UserName, PaymentRequest[] request, bool toCharge, object userState) {
            if ((this.CreateWithClearingOperationCompleted == null)) {
                this.CreateWithClearingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateWithClearingOperationCompleted);
            }
            this.InvokeAsync("CreateWithClearing", new object[] {
                        key,
                        UserName,
                        request,
                        toCharge}, this.CreateWithClearingOperationCompleted, userState);
        }
        
        private void OnCreateWithClearingOperationCompleted(object arg) {
            if ((this.CreateWithClearingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateWithClearingCompleted(this, new CreateWithClearingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_invoicereceipt/CreateWithPaymentPelecard", RequestNamespace="http://tempuri.org/Billing/w_invoicereceipt", ResponseNamespace="http://tempuri.org/Billing/w_invoicereceipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RequestResults CreateWithPaymentPelecard(string Key, string UserName, PaymentRequest req) {
            object[] results = this.Invoke("CreateWithPaymentPelecard", new object[] {
                        Key,
                        UserName,
                        req});
            return ((RequestResults)(results[0]));
        }
        
        /// <remarks/>
        public void CreateWithPaymentPelecardAsync(string Key, string UserName, PaymentRequest req) {
            this.CreateWithPaymentPelecardAsync(Key, UserName, req, null);
        }
        
        /// <remarks/>
        public void CreateWithPaymentPelecardAsync(string Key, string UserName, PaymentRequest req, object userState) {
            if ((this.CreateWithPaymentPelecardOperationCompleted == null)) {
                this.CreateWithPaymentPelecardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateWithPaymentPelecardOperationCompleted);
            }
            this.InvokeAsync("CreateWithPaymentPelecard", new object[] {
                        Key,
                        UserName,
                        req}, this.CreateWithPaymentPelecardOperationCompleted, userState);
        }
        
        private void OnCreateWithPaymentPelecardOperationCompleted(object arg) {
            if ((this.CreateWithPaymentPelecardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateWithPaymentPelecardCompleted(this, new CreateWithPaymentPelecardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_invoicereceipt/CreateInvoiceReceipt", RequestNamespace="http://tempuri.org/Billing/w_invoicereceipt", ResponseNamespace="http://tempuri.org/Billing/w_invoicereceipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RequestResults CreateInvoiceReceipt(string Key, string UserName, PaymentRequest req) {
            object[] results = this.Invoke("CreateInvoiceReceipt", new object[] {
                        Key,
                        UserName,
                        req});
            return ((RequestResults)(results[0]));
        }
        
        /// <remarks/>
        public void CreateInvoiceReceiptAsync(string Key, string UserName, PaymentRequest req) {
            this.CreateInvoiceReceiptAsync(Key, UserName, req, null);
        }
        
        /// <remarks/>
        public void CreateInvoiceReceiptAsync(string Key, string UserName, PaymentRequest req, object userState) {
            if ((this.CreateInvoiceReceiptOperationCompleted == null)) {
                this.CreateInvoiceReceiptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateInvoiceReceiptOperationCompleted);
            }
            this.InvokeAsync("CreateInvoiceReceipt", new object[] {
                        Key,
                        UserName,
                        req}, this.CreateInvoiceReceiptOperationCompleted, userState);
        }
        
        private void OnCreateInvoiceReceiptOperationCompleted(object arg) {
            if ((this.CreateInvoiceReceiptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateInvoiceReceiptCompleted(this, new CreateInvoiceReceiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_invoicereceipt/DocumentExists", RequestNamespace="http://tempuri.org/Billing/w_invoicereceipt", ResponseNamespace="http://tempuri.org/Billing/w_invoicereceipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RequestResults DocumentExists(string Username, string Key, string UniqueIdentifier) {
            object[] results = this.Invoke("DocumentExists", new object[] {
                        Username,
                        Key,
                        UniqueIdentifier});
            return ((RequestResults)(results[0]));
        }
        
        /// <remarks/>
        public void DocumentExistsAsync(string Username, string Key, string UniqueIdentifier) {
            this.DocumentExistsAsync(Username, Key, UniqueIdentifier, null);
        }
        
        /// <remarks/>
        public void DocumentExistsAsync(string Username, string Key, string UniqueIdentifier, object userState) {
            if ((this.DocumentExistsOperationCompleted == null)) {
                this.DocumentExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDocumentExistsOperationCompleted);
            }
            this.InvokeAsync("DocumentExists", new object[] {
                        Username,
                        Key,
                        UniqueIdentifier}, this.DocumentExistsOperationCompleted, userState);
        }
        
        private void OnDocumentExistsOperationCompleted(object arg) {
            if ((this.DocumentExistsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DocumentExistsCompleted(this, new DocumentExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Billing/w_invoicereceipt/IsAlive", RequestNamespace="http://tempuri.org/Billing/w_invoicereceipt", ResponseNamespace="http://tempuri.org/Billing/w_invoicereceipt", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IsAlive() {
            object[] results = this.Invoke("IsAlive", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsAliveAsync() {
            this.IsAliveAsync(null);
        }
        
        /// <remarks/>
        public void IsAliveAsync(object userState) {
            if ((this.IsAliveOperationCompleted == null)) {
                this.IsAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAliveOperationCompleted);
            }
            this.InvokeAsync("IsAlive", new object[0], this.IsAliveOperationCompleted, userState);
        }
        
        private void OnIsAliveOperationCompleted(object arg) {
            if ((this.IsAliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAliveCompleted(this, new IsAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Billing/w_invoicereceipt")]
    public partial class PaymentRequest {
        
        private string currencyTargetField;
        
        private string keyField;
        
        private string invoiceSubjectField;
        
        private string invoiceDiscountField;
        
        private string invoiceDiscountRateField;
        
        private string invoiceItemCodeField;
        
        private string invoiceItemDescriptionField;
        
        private string invoiceItemQuantityField;
        
        private string invoiceItemPriceField;
        
        private string invoiceTaxRateField;
        
        private string invoiceCommentsField;
        
        private string companyCodeField;
        
        private string companyInfoField;
        
        private string mailToField;
        
        private string isItemPriceWithTaxField;
        
        private string cashField;
        
        private string checkDateField;
        
        private string checkNumberField;
        
        private string checkAccountField;
        
        private string checkBranchField;
        
        private string checkBankField;
        
        private string checkAmountField;
        
        private string ccNumberField;
        
        private string ccExpirationField;
        
        private string ccTypeField;
        
        private string ccVerificationField;
        
        private string ccTicketField;
        
        private string ccAmountField;
        
        private string ccPaymentNumField;
        
        private string ccDateField;
        
        private string cVVField;
        
        private string cCcurrencyField;
        
        private string transDateField;
        
        private string transBankField;
        
        private string transBranchField;
        
        private string transAccountField;
        
        private string transAmountField;
        
        private string userHTMLField;
        
        private string transactionIDField;
        
        private string docNumField;
        
        private string discountAfterTaxField;
        
        private string uniqueIdentifierField;
        
        private string deductionField;
        
        private string isForceInvoiceCloseField;
        
        private string payPalTransactionIDField;
        
        private string invoiceIDField;
        
        /// <remarks/>
        public string CurrencyTarget {
            get {
                return this.currencyTargetField;
            }
            set {
                this.currencyTargetField = value;
            }
        }
        
        /// <remarks/>
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceSubject {
            get {
                return this.invoiceSubjectField;
            }
            set {
                this.invoiceSubjectField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceDiscount {
            get {
                return this.invoiceDiscountField;
            }
            set {
                this.invoiceDiscountField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceDiscountRate {
            get {
                return this.invoiceDiscountRateField;
            }
            set {
                this.invoiceDiscountRateField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceItemCode {
            get {
                return this.invoiceItemCodeField;
            }
            set {
                this.invoiceItemCodeField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceItemDescription {
            get {
                return this.invoiceItemDescriptionField;
            }
            set {
                this.invoiceItemDescriptionField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceItemQuantity {
            get {
                return this.invoiceItemQuantityField;
            }
            set {
                this.invoiceItemQuantityField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceItemPrice {
            get {
                return this.invoiceItemPriceField;
            }
            set {
                this.invoiceItemPriceField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceTaxRate {
            get {
                return this.invoiceTaxRateField;
            }
            set {
                this.invoiceTaxRateField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceComments {
            get {
                return this.invoiceCommentsField;
            }
            set {
                this.invoiceCommentsField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyCode {
            get {
                return this.companyCodeField;
            }
            set {
                this.companyCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CompanyInfo {
            get {
                return this.companyInfoField;
            }
            set {
                this.companyInfoField = value;
            }
        }
        
        /// <remarks/>
        public string MailTo {
            get {
                return this.mailToField;
            }
            set {
                this.mailToField = value;
            }
        }
        
        /// <remarks/>
        public string IsItemPriceWithTax {
            get {
                return this.isItemPriceWithTaxField;
            }
            set {
                this.isItemPriceWithTaxField = value;
            }
        }
        
        /// <remarks/>
        public string Cash {
            get {
                return this.cashField;
            }
            set {
                this.cashField = value;
            }
        }
        
        /// <remarks/>
        public string CheckDate {
            get {
                return this.checkDateField;
            }
            set {
                this.checkDateField = value;
            }
        }
        
        /// <remarks/>
        public string CheckNumber {
            get {
                return this.checkNumberField;
            }
            set {
                this.checkNumberField = value;
            }
        }
        
        /// <remarks/>
        public string CheckAccount {
            get {
                return this.checkAccountField;
            }
            set {
                this.checkAccountField = value;
            }
        }
        
        /// <remarks/>
        public string CheckBranch {
            get {
                return this.checkBranchField;
            }
            set {
                this.checkBranchField = value;
            }
        }
        
        /// <remarks/>
        public string CheckBank {
            get {
                return this.checkBankField;
            }
            set {
                this.checkBankField = value;
            }
        }
        
        /// <remarks/>
        public string CheckAmount {
            get {
                return this.checkAmountField;
            }
            set {
                this.checkAmountField = value;
            }
        }
        
        /// <remarks/>
        public string CcNumber {
            get {
                return this.ccNumberField;
            }
            set {
                this.ccNumberField = value;
            }
        }
        
        /// <remarks/>
        public string CcExpiration {
            get {
                return this.ccExpirationField;
            }
            set {
                this.ccExpirationField = value;
            }
        }
        
        /// <remarks/>
        public string CcType {
            get {
                return this.ccTypeField;
            }
            set {
                this.ccTypeField = value;
            }
        }
        
        /// <remarks/>
        public string CcVerification {
            get {
                return this.ccVerificationField;
            }
            set {
                this.ccVerificationField = value;
            }
        }
        
        /// <remarks/>
        public string CcTicket {
            get {
                return this.ccTicketField;
            }
            set {
                this.ccTicketField = value;
            }
        }
        
        /// <remarks/>
        public string CcAmount {
            get {
                return this.ccAmountField;
            }
            set {
                this.ccAmountField = value;
            }
        }
        
        /// <remarks/>
        public string CcPaymentNum {
            get {
                return this.ccPaymentNumField;
            }
            set {
                this.ccPaymentNumField = value;
            }
        }
        
        /// <remarks/>
        public string CcDate {
            get {
                return this.ccDateField;
            }
            set {
                this.ccDateField = value;
            }
        }
        
        /// <remarks/>
        public string CVV {
            get {
                return this.cVVField;
            }
            set {
                this.cVVField = value;
            }
        }
        
        /// <remarks/>
        public string CCcurrency {
            get {
                return this.cCcurrencyField;
            }
            set {
                this.cCcurrencyField = value;
            }
        }
        
        /// <remarks/>
        public string TransDate {
            get {
                return this.transDateField;
            }
            set {
                this.transDateField = value;
            }
        }
        
        /// <remarks/>
        public string TransBank {
            get {
                return this.transBankField;
            }
            set {
                this.transBankField = value;
            }
        }
        
        /// <remarks/>
        public string TransBranch {
            get {
                return this.transBranchField;
            }
            set {
                this.transBranchField = value;
            }
        }
        
        /// <remarks/>
        public string TransAccount {
            get {
                return this.transAccountField;
            }
            set {
                this.transAccountField = value;
            }
        }
        
        /// <remarks/>
        public string TransAmount {
            get {
                return this.transAmountField;
            }
            set {
                this.transAmountField = value;
            }
        }
        
        /// <remarks/>
        public string UserHTML {
            get {
                return this.userHTMLField;
            }
            set {
                this.userHTMLField = value;
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                return this.transactionIDField;
            }
            set {
                this.transactionIDField = value;
            }
        }
        
        /// <remarks/>
        public string DocNum {
            get {
                return this.docNumField;
            }
            set {
                this.docNumField = value;
            }
        }
        
        /// <remarks/>
        public string DiscountAfterTax {
            get {
                return this.discountAfterTaxField;
            }
            set {
                this.discountAfterTaxField = value;
            }
        }
        
        /// <remarks/>
        public string UniqueIdentifier {
            get {
                return this.uniqueIdentifierField;
            }
            set {
                this.uniqueIdentifierField = value;
            }
        }
        
        /// <remarks/>
        public string Deduction {
            get {
                return this.deductionField;
            }
            set {
                this.deductionField = value;
            }
        }
        
        /// <remarks/>
        public string IsForceInvoiceClose {
            get {
                return this.isForceInvoiceCloseField;
            }
            set {
                this.isForceInvoiceCloseField = value;
            }
        }
        
        /// <remarks/>
        public string PayPalTransactionID {
            get {
                return this.payPalTransactionIDField;
            }
            set {
                this.payPalTransactionIDField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceID {
            get {
                return this.invoiceIDField;
            }
            set {
                this.invoiceIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/Billing/w_invoicereceipt")]
    public partial class RequestResults {
        
        private string docUrlField;
        
        private string invoiceResponseMessageField;
        
        private int invoiceResponseCodeField;
        
        private string clearingResponseMessageField;
        
        private int clearingResponseCodeField;
        
        private int docNumberField;
        
        private string transactionIDField;
        
        /// <remarks/>
        public string docUrl {
            get {
                return this.docUrlField;
            }
            set {
                this.docUrlField = value;
            }
        }
        
        /// <remarks/>
        public string InvoiceResponseMessage {
            get {
                return this.invoiceResponseMessageField;
            }
            set {
                this.invoiceResponseMessageField = value;
            }
        }
        
        /// <remarks/>
        public int InvoiceResponseCode {
            get {
                return this.invoiceResponseCodeField;
            }
            set {
                this.invoiceResponseCodeField = value;
            }
        }
        
        /// <remarks/>
        public string ClearingResponseMessage {
            get {
                return this.clearingResponseMessageField;
            }
            set {
                this.clearingResponseMessageField = value;
            }
        }
        
        /// <remarks/>
        public int ClearingResponseCode {
            get {
                return this.clearingResponseCodeField;
            }
            set {
                this.clearingResponseCodeField = value;
            }
        }
        
        /// <remarks/>
        public int DocNumber {
            get {
                return this.docNumberField;
            }
            set {
                this.docNumberField = value;
            }
        }
        
        /// <remarks/>
        public string TransactionID {
            get {
                return this.transactionIDField;
            }
            set {
                this.transactionIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SENDCompletedEventHandler(object sender, SENDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SENDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SENDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CREATECompletedEventHandler(object sender, CREATECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CREATECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CREATECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CREATE_CONVERTCompletedEventHandler(object sender, CREATE_CONVERTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CREATE_CONVERTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CREATE_CONVERTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CREATE101CompletedEventHandler(object sender, CREATE101CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CREATE101CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CREATE101CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CREATE102CompletedEventHandler(object sender, CREATE102CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CREATE102CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CREATE102CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CreateWithPaymentMethodsCompletedEventHandler(object sender, CreateWithPaymentMethodsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateWithPaymentMethodsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateWithPaymentMethodsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CreateWithPaymentMethods2CompletedEventHandler(object sender, CreateWithPaymentMethods2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateWithPaymentMethods2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateWithPaymentMethods2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CreateWithPaymentMethods3CompletedEventHandler(object sender, CreateWithPaymentMethods3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateWithPaymentMethods3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateWithPaymentMethods3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CreatePayPalCompletedEventHandler(object sender, CreatePayPalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePayPalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreatePayPalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CreateWithClearingCompletedEventHandler(object sender, CreateWithClearingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateWithClearingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateWithClearingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RequestResults[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RequestResults[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CreateWithPaymentPelecardCompletedEventHandler(object sender, CreateWithPaymentPelecardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateWithPaymentPelecardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateWithPaymentPelecardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RequestResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RequestResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CreateInvoiceReceiptCompletedEventHandler(object sender, CreateInvoiceReceiptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateInvoiceReceiptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateInvoiceReceiptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RequestResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RequestResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DocumentExistsCompletedEventHandler(object sender, DocumentExistsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DocumentExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DocumentExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RequestResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RequestResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IsAliveCompletedEventHandler(object sender, IsAliveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591